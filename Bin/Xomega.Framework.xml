<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xomega.Framework</name>
    </assembly>
    <members>
        <member name="T:Xomega.Framework.BasePropertyBinding">
            <summary>
            A base class for providing bindings between data properties and various web or GUI controls.
            A property binding is responsible for making sure that the state of the control
            is in sync with the state of the underlying data property. This class implement common functionality
            for binding both WPF elements and web controls.
            Property bindings are created via a factory design pattern. A <c>PropertyBindingCreator</c>
            callback can be registered for any particular type of controls.
            </summary>
        </member>
        <member name="F:Xomega.Framework.BasePropertyBinding.fmt">
            <summary>
            Triggers <see cref="M:Xomega.Framework.ValueFormat.StartUp"/> method if called first.
            </summary>
        </member>
        <member name="F:Xomega.Framework.BasePropertyBinding.bindings">
            <summary>
             A static dictionary of registered data property binding creation callbacks
             by the type of the framework element.
            </summary>
        </member>
        <member name="M:Xomega.Framework.BasePropertyBinding.Register(System.Type,Xomega.Framework.BasePropertyBinding.PropertyBindingCreator)">
            <summary>
            Registers a data property binding creation callback for the given type of the framework element
            and all subtypes of that type unless a more specific data property binding is registered for that subtype.
            </summary>
            <param name="elementType">The type of the framework element to register the data property binding for.</param>
            <param name="bindingCreator">The data property binding creation callback to register for the given type.</param>
        </member>
        <member name="M:Xomega.Framework.BasePropertyBinding.Create(System.Object)">
            <summary>
            Creates a new data property binding for the given framework element
            based on the data property binding creation callbacks that have been registered
            for the type of the given framework element or any of its base types.
            </summary>
            <param name="obj">The framework element to create the data property binding for.</param>
            <returns>A new data property binding for the given framework element.</returns>
        </member>
        <member name="F:Xomega.Framework.BasePropertyBinding.property">
            <summary>
            The property that the framework element / control is bound to.
            Initialized after a data object is set as a data context for the framework element.
            </summary>
        </member>
        <member name="F:Xomega.Framework.BasePropertyBinding.row">
            <summary>
            The row in the list that this binding is bound to or -1 if the property is not in a list.
            </summary>
        </member>
        <member name="M:Xomega.Framework.BasePropertyBinding.BindTo(Xomega.Framework.DataProperty)">
            <summary>
            Binds the framework element to the given property.
            </summary>
            <param name="property">The data property to bind the framework element to.</param>
        </member>
        <member name="M:Xomega.Framework.BasePropertyBinding.OnPropertyBound">
            <summary>
            Implements addtional logic after the property has been bound.
            Sets the property label from the associated label control (see <see cref="M:Xomega.Framework.BasePropertyBinding.SetLabel"/>).
            </summary>
        </member>
        <member name="M:Xomega.Framework.BasePropertyBinding.SetLabel">
            <summary>
            A hook implemented by subclasses to find and store the associated label control 
            and set the proper to label accordingly if needed.
            </summary>
        </member>
        <member name="M:Xomega.Framework.BasePropertyBinding.SetPropertyLabel(System.String)">
            <summary>
            A method to update the label text and set it on the property if needed.
            </summary>
            <param name="lblText">The label text from the label control.</param>
        </member>
        <member name="F:Xomega.Framework.BasePropertyBinding.PreventElementUpdate">
            <summary>
            A Boolean flag to prevent updates to the framework element while the data property
            is being updated. It is set internally to prevent an infinite recursion,
            but can also be set externally temporarily to control the synchronization behavior if needed.
            </summary>
        </member>
        <member name="F:Xomega.Framework.BasePropertyBinding.PreventPropertyUpdate">
            <summary>
            A Boolean flag to prevent updates to the data property while the framework element
            is being updated. It is set internally to prevent an infinite recursion,
            but can also be set externally temporarily to control the synchronization behavior if needed.
            </summary>
        </member>
        <member name="M:Xomega.Framework.BasePropertyBinding.OnPropertyChange(System.Object,Xomega.Framework.PropertyChangeEventArgs)">
            <summary>
            Listens to the property change events and updates the framework element accordingly.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Property change event arguments.</param>
        </member>
        <member name="M:Xomega.Framework.BasePropertyBinding.UpdateElement(Xomega.Framework.PropertyChange)">
            <summary>
            Updates the framework element based on the given property change.
            Subclasses can override this method, but typically they can override
            individual methods for each particular type of property change.
            </summary>
            <param name="change">The property change.</param>
        </member>
        <member name="M:Xomega.Framework.BasePropertyBinding.UpdateEditability">
            <summary>
            Updates editability of the element based on editability of the property.
            Default behavior just disables the control, but subclasses can make it read-only instead
            or handle it in a different way.
            </summary>
        </member>
        <member name="M:Xomega.Framework.BasePropertyBinding.UpdateVisibility">
            <summary>
            Updates visibility of the element based on the visibility of the property.
            Default behavior sets the element visibility to Collapsed if the property is not visible
            and updates the label visibility, but subclasses can handle it in a different way.
            </summary>
        </member>
        <member name="M:Xomega.Framework.BasePropertyBinding.UpdateRequired">
            <summary>
            Updates a Required dependency property of the element and the label (if any)
            based on the Required flag of the data property. Subclasses can handle it in a different way.
            </summary>
            <seealso cref="F:Xomega.Framework.Property.RequiredProperty"/>
        </member>
        <member name="M:Xomega.Framework.BasePropertyBinding.UpdateValidation">
            <summary>
            Updates WPF validation status of the element based on the validation status
            of the data property. The default implementation adds a single validation error
            to the element with a combined error text from all property validation errors.
            </summary>
        </member>
        <member name="M:Xomega.Framework.BasePropertyBinding.UpdateProperty(System.Object)">
            <summary>
            Updates the property with the given value from the element.
            </summary>
            <param name="value">The value to set on the data property.</param>
        </member>
        <member name="M:Xomega.Framework.BasePropertyBinding.Dispose">
            <summary>
            Disposes the data property binding by unbinding it from the underlying property.
            </summary>
        </member>
        <member name="M:Xomega.Framework.BasePropertyBinding.FindChildObject(Xomega.Framework.DataObject,System.String)">
            <summary>
            A static utility method to find a child data object in the given object by the specified
            dot-delimited path to the child object.
            </summary>
            <param name="obj">The parent object to find the child object in.</param>
            <param name="childPath">A dot-delimited path to the child object.</param>
            <returns></returns>
        </member>
        <member name="P:Xomega.Framework.BasePropertyBinding.BoundProperty">
            <summary>
            Returns the actual data property that the framework element is bound to.
            </summary>
        </member>
        <member name="T:Xomega.Framework.BasePropertyBinding.PropertyBindingCreator">
            <summary>
            A function that creates a data property binding for a given framework element.
            </summary>
            <param name="obj">The framework element to create the data property binding for.</param>
            <returns>A new data property binding for the given framework element.</returns>
        </member>
        <member name="T:Xomega.Framework.Property">
            <summary>
            A static collection of dependency properties that are used by Xomega framework.
            Most of these properties must be set manually in XAML and are related to data properties
            and since they have to be prefixed by the containing class name the latter has been made
            a short most relevant word.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Property.GetName(System.Windows.DependencyObject)">
            <summary>
             Gets the data property name dependency property for the given framework element if any.
            </summary>
            <param name="obj">The framework element to get the dependency property of.</param>
            <returns>The data property name dependency property for the given framework element if any.</returns>
        </member>
        <member name="M:Xomega.Framework.Property.SetName(System.Windows.DependencyObject,System.String)">
            <summary>
             Sets a data property name dependency property on a framework element.
            </summary>
            <param name="obj">The framework element to set the dependency property on.</param>
            <param name="value">The data property name to set.</param>
        </member>
        <member name="F:Xomega.Framework.Property.NameProperty">
            <summary>
            A dependency property that sets the data property name on a framework element
            to point to the data property that it needs to be bound to.
            The best practice for a setting the data property name on a framework element
            is to use a constant string declared in the code instead of hard coding the
            property name in XAML. This way renaming a property can be much easier
            and the compiler will validate the data property name in XAML.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Property.GetChildObject(System.Windows.DependencyObject)">
            <summary>
             Gets the child object dependency property for the given framework element if any.
            </summary>
            <param name="obj">The framework element to get the dependency property of.</param>
            <returns>The child object dependency property for the given framework element if any.</returns>
        </member>
        <member name="M:Xomega.Framework.Property.SetChildObject(System.Windows.DependencyObject,System.String)">
            <summary>
             Sets a child object dependency property on a framework element.
            </summary>
            <param name="obj">The framework element to set the dependency property on.</param>
            <param name="value">The child object path to set.</param>
        </member>
        <member name="F:Xomega.Framework.Property.ChildObjectProperty">
            <summary>
            A dependency property that sets a dot delimited path to the child data object on a framework element.
            This dependency property can be set only in conjunction with the data property name.
            It points to a child data object contained within the data context object of the element,
            from which a data property with the given name should be bound to this element.
            The best practice for a setting the child object path on a framework element
            is to use a constant string declared in the code instead of hard coding the
            path in XAML. This way renaming child objects can be much easier
            and the compiler will validate the child object path in XAML.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Property.SetupBinding(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A callback that is triggered when a data property name or a child object path
            are set on a framework element. It sets up a new data property binding on the element.
            </summary>
            <param name="d">The framework element.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Xomega.Framework.Property.BindingProperty">
            <summary>
            Internal dependency property that stores the data property binding on the element.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Property.GetRequired(System.Windows.FrameworkElement)">
            <summary>
             Gets the Required dependency property for the given framework element if any.
            </summary>
            <param name="obj">The framework element to get the dependency property of.</param>
            <returns>The value of the Required dependency property for the given framework element if any.</returns>
        </member>
        <member name="M:Xomega.Framework.Property.SetRequired(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
             Sets a Required dependency property on a framework element.
            </summary>
            <param name="obj">The framework element to set the dependency property on.</param>
            <param name="value">The value of the required flag to set.</param>
        </member>
        <member name="F:Xomega.Framework.Property.RequiredProperty">
            <summary>
            A dependency property that stores the Required flag of the underlying data property
            on the framework element and the associated label so that they could be styled appropriately,
            e.g. make the label bold for a required field or had an asterisk at the end, etc.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Property.GetLabel(System.Windows.FrameworkElement)">
            <summary>
             Gets the label associated with the given framework element if any.
            </summary>
            <param name="obj">The framework element to get the label of.</param>
            <returns>The label associated with the given framework element if any.</returns>
        </member>
        <member name="M:Xomega.Framework.Property.SetLabel(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
             Sets a label for the given framework element.
            </summary>
            <param name="obj">The framework element to set the label for.</param>
            <param name="value">The label element set for the given framework.</param>
        </member>
        <member name="F:Xomega.Framework.Property.LabelProperty">
            <summary>
            A dependency property that stores a reference to the label associated with the current framework element.
            </summary>
            <remarks>Recreates the property binding when a label is being set since the the former uses the label.</remarks>
        </member>
        <member name="F:Xomega.Framework.Property.ValidationProperty">
            <summary>
            Additional dependency property that stores data property's validation errors as an ErrorList,
            which has additional information for each error such as severity etc.
            </summary>
        </member>
        <member name="T:Xomega.Framework.Property.ValidationResults">
            <summary>
            A helper class that allows storing the validation results as an error list.
            It is needed as a workaround to manually trigger Silverlight validation.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Property.ValidationResults.Show">
            <summary>
            A property that throws a validation exception when being set if there are validation errors.
            This is a workaround to manually trigger Silverlight validation by binding to this property
            so that the binding will be in error.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Property.ValidationResults.Errors">
            <summary>
            A list of validation errors.
            </summary>
        </member>
        <member name="T:Xomega.Framework.DataPropertyItemBinding">
            <summary>
            A generic binding that allows displaying property items (possible values)
            formatted by the data property according to the specified value format
            (typically <see cref="F:Xomega.Framework.ValueFormat.DisplayString"/>) based on the property configuration.
            For example, if property values and possible items are of type <c>Header</c>
            and the property is configured to display its values as a combination of ID and Name,
            then the list of possible items (and not just the property value) will be also displayed like this.
            This class is used internally by the <see cref="T:Xomega.Framework.Binding.SelectorPropertyBinding"/> class
            but can also be used in the XAML by application developers when a custom list item template
            is being used.
            </summary>
            <example>
            Below is the default list item data template used by Xomega framework. Developers can enhance it
            in XAML to provide a more sophisticated template for list items.
            <DataTemplate xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:xom="clr-namespace:Xomega.Framework;assembly=Xomega.Framework">
            <TextBlock xom:DataPropertyItemBinding.ValueFormat="{x:Static xom:ValueFormat.DisplayString}"/></DataTemplate>
            </example>
            <remarks>Note: This code doesn't work in Silverlight 3 due to its limitations to obtain combo box from the item.</remarks>
        </member>
        <member name="M:Xomega.Framework.DataPropertyItemBinding.GetValueFormat(System.Windows.Controls.TextBlock)">
            <summary>
            Gets the value format dependency property that is set on the given text block if any.
            </summary>
            <param name="obj">The text block element.</param>
            <returns>The value format dependency property that is set on the given text block if any.</returns>
        </member>
        <member name="M:Xomega.Framework.DataPropertyItemBinding.SetValueFormat(System.Windows.Controls.TextBlock,Xomega.Framework.ValueFormat)">
            <summary>
            Sets the value format dependency property on a text block.
            </summary>
            <param name="obj">The text block element to set the property on.</param>
            <param name="value">The value format to set on the text block.</param>
        </member>
        <member name="F:Xomega.Framework.DataPropertyItemBinding.ValueFormatProperty">
            <summary>
            A ValueFormat dependency property that needs to be set on a TextBlock inside a list item template
            to make it display the string for the current item formatted according to the property's rules.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataPropertyItemBinding.OnValueFormatChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A callback that is triggered when a value format dependency properties is set.
            </summary>
            <param name="d">The dependency object the property has been set on.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Xomega.Framework.DataPropertyItemBinding.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A handler of the data context change event on a text block that has a value format dependency property set,
            which updates the text of the text block to be formatted according to the specified value format.
            </summary>
            <param name="sender">Event sender, which should be a text block.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Xomega.Framework.DataPropertyItemBinding.GetBinding(System.Windows.DependencyObject)">
            <summary>
            Gets the data property binding from a dependency object or its parent.
            </summary>
            <param name="obj">Dependency object.</param>
            <returns>Data property binding or null if not found.</returns>
        </member>
        <member name="T:Xomega.Framework.Binding.SelectorPropertyBinding">
            <summary>
            A class that provides data property binding for Selector WPF elements (ListBox or ComboBox).
            It allows displaying the list of available items provided by the property,
            and keeps the selected items in sync with the current property values.
            </summary>
        </member>
        <member name="T:Xomega.Framework.DataPropertyBinding">
            <summary>
            A base class for providing bindings between data properties and various WPF elements.
            A data property binding is responsible for making sure that the state of the WPF element
            is in sync with the state of the underlying data property. Data property bindings
            are attached to the framework elements via a WPF dependency property
            (see <see cref="F:Xomega.Framework.Property.BindingProperty"/>). They are constructed with just a property name
            based on the value of another dependency property (see <see cref="F:Xomega.Framework.Property.NameProperty"/>)
            that can be statically specified in the XAML. Once a data object is set as a data context
            for the framework element, a data property with the given name will be retrieved from the 
            data object and the element will be bound to that property.
            Data property bindings are created via a factory design pattern. A <c>PropertyBindingCreator</c>
            callback can be registered for any particular type of framework elements. If no binding
            is registered for a given type, the one for the  base type will be used.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataPropertyBinding.#cctor">
            <summary>
            A static constructor that registers Xomega framework data property bindings.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataPropertyBinding.Register">
            <summary>
             A static catch-all method to register DataPropertyBinding for all bindable WPF dependency objects.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataPropertyBinding.IsBindable(System.Windows.DependencyObject)">
            <summary>
            Checks if a dependency object is property bindable by checking its 
            dependency property for the property name (see <see cref="F:Xomega.Framework.Property.NameProperty"/>).
            </summary>
            <param name="obj">Dependency object to check.</param>
            <returns>Whether or not the dependency object is property bindable.</returns>
        </member>
        <member name="F:Xomega.Framework.DataPropertyBinding.element">
            <summary>
            The framework element that is bound to the data property.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataPropertyBinding.#ctor(System.Windows.DependencyObject)">
            <summary>
            Constructs a base data property binding for the given framework element and the property name.
            </summary>
            <param name="fwkElement">The framework element to be bound to a property with the specified name.</param>
        </member>
        <member name="M:Xomega.Framework.DataPropertyBinding.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A handler of the data context change that finds the data property in the context data object
            and binds the framework element to it.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Xomega.Framework.DataPropertyBinding.UpdateEditability">
            <summary>
            Updates editability of the element based on editability of the property.
            Default behavior just disables the control, but subclasses can make it read-only instead
            or handle it in a different way.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataPropertyBinding.UpdateVisibility">
            <summary>
            Updates visibility of the element based on the visibility of the property.
            Default behavior sets the element visibility to Collapsed if the property is not visible
            and updates the label visibility, but subclasses can handle it in a different way.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataPropertyBinding.UpdateRequired">
            <summary>
            Updates a Required dependency property of the element and the label (if any)
            based on the Required flag of the data property. Subclasses can handle it in a different way.
            </summary>
            <seealso cref="F:Xomega.Framework.Property.RequiredProperty"/>
        </member>
        <member name="M:Xomega.Framework.DataPropertyBinding.UpdateValidation">
            <summary>
            Updates WPF validation status of the element based on the validation status
            of the data property. The default implementation adds a single validation error
            to the element with a combined error text from all property validation errors.
            </summary>
        </member>
        <member name="F:Xomega.Framework.DataPropertyBinding.ValidationExpressionProperty">
            <summary>
            A dummy attached property for the <see cref="M:Xomega.Framework.DataPropertyBinding.GetValidationExpression"/> method.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataPropertyBinding.GetValidationExpression">
            <summary>
            Creates a dummy binding expression that can be used to add or clear WPF validation errors.
            </summary>
            <returns>A dummy binding expression to support WPF validation.</returns>
        </member>
        <member name="M:Xomega.Framework.DataPropertyBinding.SetLabel">
            <summary>
            Associates the current framework element with the label that is stored in the element's
            dependency property <see cref="F:Xomega.Framework.Property.LabelProperty"/>, which can be statically set in XAML.
            Default implementation sets the current element as the target for the label and also sets
            the label text on the data property from the corresponding label control if not already set.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Binding.SelectorPropertyBinding.Register">
            <summary>
             A static method to register the selector property binding for Selector WPF element.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Binding.SelectorPropertyBinding.#ctor(System.Windows.Controls.Primitives.Selector)">
            <summary>
            Constructs a new selector property binding for the given Selector element.
            </summary>
            <param name="selector">The selector element to be bound to the data property.</param>
        </member>
        <member name="M:Xomega.Framework.Binding.SelectorPropertyBinding.OnTextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            For editable combo boxes updates the property value whenever the text is changed.
            </summary>
            <param name="sender">Text changed event sender.</param>
            <param name="e">Text changed event arguments.</param>
        </member>
        <member name="F:Xomega.Framework.Binding.SelectorPropertyBinding.defaultTemplate">
            <summary>
            A XAML string that represents the default list item template that allows formatting
            list items according to the property rules for the DisplayString value format.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Binding.SelectorPropertyBinding.BindTo(Xomega.Framework.DataProperty)">
            <summary>
            Binds the selector to the given property. Sets the selection mode based on
            whether or not the property is multivalued and the default list item template
            unless it has already been set in XAML.
            </summary>
            <param name="property">The data property to bind the framework element to.</param>
        </member>
        <member name="M:Xomega.Framework.Binding.SelectorPropertyBinding.UpdateElement(Xomega.Framework.PropertyChange)">
            <summary>
            Updates the selector based on the given property change.
            Updates the list of possible items based on the values provided by the property
            and inserts a blank item for a combo box if the property is editable and not required.
            </summary>
            <param name="change">The property change.</param>
        </member>
        <member name="T:Xomega.Framework.Binding.ToggleButtonPropertyBinding">
            <summary>
            A class that provides data property binding for toggle button WPF elements
            (checkboxes, radio buttons etc.).
            </summary>
        </member>
        <member name="M:Xomega.Framework.Binding.ToggleButtonPropertyBinding.Register">
            <summary>
             A static method to register the ToggleButtonPropertyBinding for toggle button WPF elements.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Binding.ToggleButtonPropertyBinding.#ctor(System.Windows.Controls.Primitives.ToggleButton)">
            <summary>
            Constructs a new toggle button property binding for the given toggle button.
            </summary>
            <param name="tglButton">The toggle button to be bound to the property.</param>
        </member>
        <member name="M:Xomega.Framework.Binding.ToggleButtonPropertyBinding.OnStateChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Updates the property when the state of the toggle button is changed.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Xomega.Framework.Binding.ToggleButtonPropertyBinding.UpdateElement(Xomega.Framework.PropertyChange)">
            <summary>
            Updates the toggle button based on the given property change.
            If the property is not required the toggle button will allow three states
            to support an indeterminate state when the property value is not set.
            Otherwise turns the toggle button on or off based on the Boolean value of the property.
            </summary>
            <param name="change">The property change.</param>
        </member>
        <member name="T:Xomega.Framework.Binding.TextBlockPropertyBinding">
            <summary>
            A class that provides data property binding for textblock WPF elements.
            It sets the text to the data property value formatted based on the DisplayString
            value format and keeps it in sync with the underlying property value.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Binding.TextBlockPropertyBinding.Register">
            <summary>
             A static method to register the TextBlockPropertyBinding for TextBlock WPF elements.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Binding.TextBlockPropertyBinding.#ctor(System.Windows.Controls.TextBlock)">
            <summary>
            Constructs a new textblock property binding for the given text block.
            </summary>
            <param name="textBlock">The text block to be bound to the property.</param>
        </member>
        <member name="M:Xomega.Framework.Binding.TextBlockPropertyBinding.UpdateElement(Xomega.Framework.PropertyChange)">
            <summary>
            Updates the text of the text block to the property value formatted
            according to the property's DisplayString format.
            </summary>
            <param name="change">The property change.</param>
        </member>
        <member name="T:Xomega.Framework.Binding.TextBoxPropertyBinding">
            <summary>
            A class that provides data property binding for text box WPF elements.
            It sets the editable text to the data property value formatted based on the EditString
            value format and keeps it in sync with the underlying property value.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Binding.TextBoxPropertyBinding.Register">
            <summary>
             A static method to register the TextBoxPropertyBinding for TextBox WPF elements.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Binding.TextBoxPropertyBinding.#ctor(System.Windows.Controls.TextBox)">
            <summary>
            Constructs a new text box property binding for the given text box.
            </summary>
            <param name="textBox">The text box to be bound to the property.</param>
        </member>
        <member name="M:Xomega.Framework.Binding.TextBoxPropertyBinding.BindTo(Xomega.Framework.DataProperty)">
            <summary>
            Binds the text box to the given property.
            Sets the maximum text length to the property size if available.
            </summary>
            <param name="property">The data property to bind the text box to.</param>
        </member>
        <member name="M:Xomega.Framework.Binding.TextBoxPropertyBinding.UpdateElement(Xomega.Framework.PropertyChange)">
            <summary>
            Updates the text of the text box to the property value formatted
            according to the property's EditString format if editable or DisplayString if not editable.
            </summary>
            <param name="change">The property change.</param>
        </member>
        <member name="T:Xomega.Framework.Converters.RequiredToFontWeightConverter">
            <summary>
            A value converter that can convert a boolean value of the Required Xomega property
            to a corresponding font weight to enable marking required fields with bold labels.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Converters.RequiredToFontWeightConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the required boolean value to a font weight.
            </summary>
            <param name="value">The required boolean value.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>The <see cref="P:Xomega.Framework.Converters.RequiredToFontWeightConverter.Required"/> property for required value, otherwise the <see cref="P:Xomega.Framework.Converters.RequiredToFontWeightConverter.Optional"/> property.</returns>
        </member>
        <member name="M:Xomega.Framework.Converters.RequiredToFontWeightConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the value as is. No conversion back is supported.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>The value passed in as is.</returns>
        </member>
        <member name="P:Xomega.Framework.Converters.RequiredToFontWeightConverter.Required">
            <summary>
            Font weight for the required fields, e.g. Bold.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Converters.RequiredToFontWeightConverter.Optional">
            <summary>
            Font weight for non-required fields, e.g. Normal.
            </summary>
        </member>
        <member name="T:Xomega.Framework.DataListObject">
            <summary>
            A dynamic data object that has a list of rows as its data instead of specific values.
            </summary>
        </member>
        <member name="T:Xomega.Framework.DataObject">
            <summary>
            The base class for all data objects, which contain a list of data properties
            and possibly a number of child objects or object lists.
            </summary>
        </member>
        <member name="T:Xomega.Framework.IDataObject">
            <summary>
            Data object interface to be implemented by the parent object
            or all child objects of any data object.
            Both <c>DataObject</c> and <c>DataObjectList</c> implement this interface.
            </summary>
        </member>
        <member name="T:Xomega.Framework.IValidatable">
            <summary>
            An interface for objects that support validation.
            </summary>
        </member>
        <member name="M:Xomega.Framework.IValidatable.Validate(System.Boolean)">
            <summary>
            Validates the data object and all its properties and child objects recursively.
            </summary>
            <param name="force">True to validate regardless of
            whether or not it has been already validated.</param>
        </member>
        <member name="M:Xomega.Framework.IDataObject.IsPropertyEditable(Xomega.Framework.BaseProperty)">
            <summary>
            Allows controlling property editability on the data object level.
            </summary>
            <param name="p">The property to check the editability of.</param>
            <returns>True if the property should be editable, false otherwise.</returns>
        </member>
        <member name="M:Xomega.Framework.IDataObject.IsPropertyRequired(Xomega.Framework.BaseProperty)">
            <summary>
            Allows controlling if the property is required on the data object level.
            </summary>
            <param name="p">The property being checked if it's required.</param>
            <returns>True if the property should be required, false otherwise.</returns>
        </member>
        <member name="M:Xomega.Framework.IDataObject.IsPropertyVisible(Xomega.Framework.BaseProperty)">
            <summary>
            Allows controlling property visibility on the data object level.
            </summary>
            <param name="p">The property to check the visibility of.</param>
            <returns>True if the property should be visible, false otherwise.</returns>
        </member>
        <member name="M:Xomega.Framework.IDataObject.FirePropertyChange(Xomega.Framework.PropertyChangeEventArgs)">
            <summary>
            Fires a property change event recursively through all properties and child objects.
            </summary>
            <param name="args">Property change event arguments.</param>
        </member>
        <member name="M:Xomega.Framework.IDataObject.GetValidationErrors">
            <summary>
            Gets all validation errors from the data object,
            all its properties and child objects recursively.
            </summary>
            <returns>Validation errors from the data object,
            all its properties and child objects.</returns>
        </member>
        <member name="M:Xomega.Framework.IDataObject.ResetAllValidation">
            <summary>
            Resets validation status to not validated on the object,
            all its properties and child objects recursively.
            </summary>
        </member>
        <member name="M:Xomega.Framework.IDataObject.IsModified">
            <summary>
            Returns the modification state of the data object.
            </summary>
            <returns>The modification state of the data object.
            Null means the date object has never been initialized with data.
            False means the data object has been initialized, but has not been changed since then.
            True means that the data object has been modified since it was initialized.</returns>
        </member>
        <member name="M:Xomega.Framework.IDataObject.SetModified(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Sets the modification state for the data object to the specified value.
            </summary>
            <param name="modified">The modification state value.
            Null means the date object has never been initialized with data.
            False means the data object has been initialized, but has not been changed since then.
            True means that the data object has been modified since it was initialized.</param>
            <param name="recursive">True to propagate the modification state
            to all properties and child objects, false otherwise.</param>
        </member>
        <member name="M:Xomega.Framework.IDataObject.CopyFrom(Xomega.Framework.IDataObject)">
            <summary>
            Perform a deep copy of the state from another data object (presumably of the same type).
            </summary>
            <param name="obj">The object to copy the state from.</param>
        </member>
        <member name="P:Xomega.Framework.IDataObject.Parent">
            <summary>
            Gets or sets the parent object for the current data object.
            </summary>
        </member>
        <member name="P:Xomega.Framework.IDataObject.Editable">
            <summary>
            Returns if the current object is editable, which may be based on several factors.
            Allows making the object non-editable by setting this field to true.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObject.#ctor">
            <summary>
            Protected default constructor that delegates construction
            to the <c>Init</c> method.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObject.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            OnDeserializing callback to support deserialization, which
            delegates construction to the <c>Init</c> method.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Xomega.Framework.DataObject.Init">
            <summary>
            Initializes the dictionaries for properties and child objects
            and calls the main <c>Initialize</c> method to add the actual
            properties and child objects.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObject.Initialize">
            <summary>
            The abstract method to be implemented by the subclasses
            to add and initialize data object properties and child objects.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObject.OnInitialized">
            <summary>
            Additional initialization that happens after all the properties
            and child objects have been added and are therefore accessible.
            The base class implementation just calls the <c>Initialize</c> method
            on all the data properties to initialize themselves.
            If the main <c>Initialize</c> method is generated as part of the 
            generated object and therefore cannot be changed, this method
            can also be used by the non-generated part of the class
            to perform additional post-initialization.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObject.CopyFrom(Xomega.Framework.IDataObject)">
            <summary>
            Perform a deep copy of the state from another data object (presumably of the same type).
            </summary>
            <param name="obj">The object to copy the state from.</param>
        </member>
        <member name="F:Xomega.Framework.DataObject.properties">
            <summary>
            The dictionary of the data object properties by their names.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObject.HasProperty(System.String)">
            <summary>
            Checks of the data object has a property with the given name.
            </summary>
            <param name="name">The property name to check for existence.</param>
            <returns>True if the data object contains a property with the given name, false otherwise.</returns>
        </member>
        <member name="M:Xomega.Framework.DataObject.AddProperty(Xomega.Framework.DataProperty)">
            <summary>
            Adds the specified property to the data object.
            </summary>
            <param name="property">The property to add to the data object.</param>
        </member>
        <member name="F:Xomega.Framework.DataObject.parent">
            <summary>
            The parent data object for the current object if any.
            </summary>
        </member>
        <member name="F:Xomega.Framework.DataObject.childObjects">
            <summary>
            A dictionary of the current data object's child objects or object lists by their name.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObject.AddChildObject(System.String,Xomega.Framework.IDataObject)">
            <summary>
            Adds the specified child object or object list to the current data object
            under the given name.
            </summary>
            <param name="name">The name, under which the child object will be added to the current data object.</param>
            <param name="obj">The child object to add to the current object.</param>
        </member>
        <member name="M:Xomega.Framework.DataObject.GetChildObject(System.String)">
            <summary>
            Gets the child object or object list for the given name or null
            if no child is found under this name.
            </summary>
            <param name="name">The name of the child object to return.</param>
            <returns>The child object or object list for the given name or null
            if no child is found under this name.</returns>
        </member>
        <member name="M:Xomega.Framework.DataObject.FirePropertyChange(Xomega.Framework.PropertyChangeEventArgs)">
            <summary>
            Fires a property change event recursively through all properties and child objects.
            </summary>
            <param name="args">Property change event arguments.</param>
        </member>
        <member name="M:Xomega.Framework.DataObject.IsPropertyRequired(Xomega.Framework.BaseProperty)">
            <summary>
            Allows controlling if the property is required on the data object level.
            </summary>
            <param name="p">The property being checked if it's required.</param>
            <returns>True if the property should be required, false otherwise.</returns>
        </member>
        <member name="M:Xomega.Framework.DataObject.IsPropertyVisible(Xomega.Framework.BaseProperty)">
            <summary>
            Allows controlling property visibility on the data object level.
            </summary>
            <param name="p">The property to check the visibility of.</param>
            <returns>True if the property should be visible, false otherwise.</returns>
        </member>
        <member name="F:Xomega.Framework.DataObject.editable">
            <summary>
            An internal flag to allow manually making the data object uneditable.
            The default value is true.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObject.IsPropertyEditable(Xomega.Framework.BaseProperty)">
            <summary>
            Allows controlling property editability on the data object level.
            Subclasses can override this method to define custom rules
            for property editability.
            </summary>
            <param name="p">The property to check the editability of.</param>
            <returns>True if the property should be editable, false otherwise.</returns>
        </member>
        <member name="F:Xomega.Framework.DataObject.accessLevel">
            <summary>
            Internal field that stores the security access level for the data object.
            The default value is full access.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObject.FromDataContract(System.Object)">
            <summary>
            Sets the data object values from the given data contract object
            by copying the values of the data contract object fields to the
            data object properties or child objects with the same names.
            If there is no exact match between some data contract field names
            and the data object property names, this method can be overridden
            in the subclass to address each such case.
            </summary>
            <param name="dataContract">The data contract object to copy the values from.</param>
        </member>
        <member name="M:Xomega.Framework.DataObject.ToDataContract(System.Object)">
            <summary>
            Exports the data object property values and child object values
            to the given data contract object by setting all its properties
            to the values of the corresponding properties or child objects
            with the same names.
            If there is no exact match between some data contract property names
            and the data object property names, this method can be overridden
            in the subclass to address each such case.
            </summary>
            <param name="dataContract">The data contract object to export
            the current data object values to.</param>
        </member>
        <member name="M:Xomega.Framework.DataObject.ToDataContractProperties(System.Object,System.Reflection.PropertyInfo[])">
            <summary>
            Exports the data object property values and child object values
            to the given data contract object by setting the specified properties
            of the data contract to the values of the corresponding properties
            or child objects with the same names.
            This method can be used to partially export data object values
            to a data contract object.
            </summary>
            <param name="dataContract">The data contract object to export
            the current data object values to.</param>
            <param name="props">The data contract object fields to set.</param>
        </member>
        <member name="M:Xomega.Framework.DataObject.CreateInstance(System.Type)">
            <summary>
            Create an instance of a certain type. If the type is IEnumerable
            then creates a corresponding generic list or dictionary as appropriate.
            </summary>
            <param name="type">The type to create an instance of.</param>
            <returns>An instance of the corresponding type.</returns>
        </member>
        <member name="F:Xomega.Framework.DataObject.validationErrorList">
            <summary>
            A list of validation errors that are not tied to any particular
            data property but rather to the data object as a whole.
            Null value means that the object has not been validated yet.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObject.GetValidationErrors">
            <summary>
            Gets all validation errors from the data object, all its properties and child objects recursively.
            </summary>
            <returns>Validation errors from the data object, all its properties and child objects.</returns>
        </member>
        <member name="M:Xomega.Framework.DataObject.ResetValidation">
            <summary>
            Resets validation status to not validated on the object
            by setting the validation error list to null.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObject.ResetAllValidation">
            <summary>
            Resets validation status to not validated on the object,
            all its properties and child objects recursively.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObject.Validate(System.Boolean)">
            <summary>
            Validates the data object and all its properties and child objects recursively.
            </summary>
            <param name="force">True to validate regardless of
            whether or not it has been already validated.</param>
        </member>
        <member name="F:Xomega.Framework.DataObject.modified">
            <summary>
            Tracks the modification state of the data object.
            Null means the date object has never been initialized with data.
            False means the data object has been initialized, but has not been changed since then.
            True means that the data object has been modified since it was initialized.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObject.IsModified">
            <summary>
            Returns the modification state of the data object.
            </summary>
            <returns>The modification state of the data object.
            Null means the date object has never been initialized with data.
            False means the data object has been initialized, but has not been changed since then.
            True means that the data object has been modified since it was initialized.</returns>
        </member>
        <member name="M:Xomega.Framework.DataObject.SetModified(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Sets the modification state for the data object to the specified value.
            </summary>
            <param name="modified">The modification state value.
            Null means the date object has never been initialized with data.
            False means the data object has been initialized, but has not been changed since then.
            True means that the data object has been modified since it was initialized.</param>
            <param name="recursive">True to propagate the modification state
            to all properties and child objects, false otherwise.</param>
        </member>
        <member name="P:Xomega.Framework.DataObject.Item(System.String)">
            <summary>
            A string-based indexer that returns a data object property by its name
            or null if no property with this name is found on the object.
            </summary>
            <param name="name">The property of the name to return.</param>
            <returns>The data property of the data object with the given name or null if not found.</returns>
        </member>
        <member name="P:Xomega.Framework.DataObject.Properties">
            <summary>
            Returns an enumeration of the data object properties.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataObject.Parent">
            <summary>
            Gets or sets the parent data object for the current object if any.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataObject.Editable">
            <summary>
            Returns a value indicating whether or not the data object is editable.
            This value is calculated based on the internal value of the editable field,
            the parent object's editability and the value of the security access level.
            Setting this value updates the internal editable flag and fires
            a property change event for all properties if necessary.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataObject.AccessLevel">
            <summary>
            Returns the current access level for the data object.
            Allows setting a new access level and fires a property change event
            for editability and visibility of all properties,
            since they both depend on the security access level.
            </summary>
        </member>
        <member name="F:Xomega.Framework.DataListObject.data">
            <summary>
            The data table for the list stored as an array of arrays
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataListObject.GetData">
            <summary>
            Gets the underlying list of data rows for the data list object.
            </summary>
            <returns>A list of DataRow objects.</returns>
        </member>
        <member name="F:Xomega.Framework.DataListObject.currentRow">
            <summary>
            The current row index if set.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataListObject.#ctor">
            <summary>
            Constructs a new data list object.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataListObject.OnInitialized">
            <summary>
            Additional initialization after all properties are constructed
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataListObject.Clear">
            <summary>
            Clears the data list.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataListObject.Sort">
            <summary>
            Sorts the data object list according to the specified <see cref="P:Xomega.Framework.DataListObject.SortCriteria"/>.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataListObject.Sort(System.Comparison{Xomega.Framework.DataRow})">
            <summary>
            Sorts the data object list according to the specified comparison function.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataListObject.FireCollectionChange(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Tracks changes to the list of objects to update the modification state
            as well as the parent object on all objects that have been added or deleted.
            </summary>
            <param name="e">Collection change event arguments.</param>
        </member>
        <member name="M:Xomega.Framework.DataListObject.FireCollectionChanged">
            <summary>
            Fire a CollectionChanged event for the entire list
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataListObject.Insert(System.Int32,Xomega.Framework.DataRow)">
            <summary>
            Insert a new data row at the specified index. The data row should have this list as a parent.
            </summary>
            <param name="index">Index at which to insert a new data row.</param>
            <param name="row">The data row to insert.</param>
        </member>
        <member name="M:Xomega.Framework.DataListObject.RemoveAt(System.Int32)">
            <summary>
            Remove a data row at the specified index.
            </summary>
            <param name="index">Index to remove a data row at.</param>
        </member>
        <member name="M:Xomega.Framework.DataListObject.FromDataContract(System.Collections.IEnumerable)">
            <summary>
            Populates the data object list and imports the data from the given data contract list.
            </summary>
            <param name="list">A list of data contract objects to populate the list from.</param>
        </member>
        <member name="M:Xomega.Framework.DataListObject.GetEnumerator">
            <summary>
            Resets the current enumerator and returns this object as an enumerator that iterates through the collection of data objects.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Xomega.Framework.DataListObject.Dispose">
            <summary>
            Empty dispose method.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataListObject.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xomega.Framework.DataListObject.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataListObject.ColumnCount">
            <summary>
            The number of columns in the data list.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataListObject.RowCount">
            <summary>
            The number of rows in the data list.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataListObject.CurrentRow">
            <summary>
            Accessor for the current row index.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataListObject.EditRow">
            <summary>
            A temporary variable to store a copy of a row before editing to allow cancelling edits.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataListObject.SortCriteria">
            <summary>
            Gets or sets sort criteria for the data object list.
            </summary>
        </member>
        <member name="E:Xomega.Framework.DataListObject.CollectionChanged">
            <summary>
            Occurs when the data in the list changes.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataListObject.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataListObject.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current untyped element in the collection.
            </summary>
        </member>
        <member name="T:Xomega.Framework.DataListObject.RowProxyObject">
            <summary>
            A proxy data object for a row in the list that is returned by the enumerator on the list object.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataListObject.RowProxyObject.#ctor(Xomega.Framework.DataListObject,System.Int32)">
            <summary>
            Constructs a new data list row proxy object.
            </summary>
            <param name="list">The list from which to construct the row proxy object.</param>
            <param name="row">The row index.</param>
        </member>
        <member name="M:Xomega.Framework.DataListObject.RowProxyObject.Initialize">
            <summary>
            Empty implemenation of the abstract Initalize method.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataListObject.RowProxyObject.List">
            <summary>
            The data list object, for which this object is a proxy.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataListObject.RowProxyObject.Row">
            <summary>
            The row index of the row in the data list object, for which this is a proxy.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataListObject.RowProxyObject.Item(System.String)">
            <summary>
            Overrides retrieval of data properties by name to return the corresponding property of the data list
            after setting its current row to this object's row.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>A data property of the associated list object with the proper current row set.</returns>
        </member>
        <member name="T:Xomega.Framework.DataRow">
            <summary>
            Data row is a class that is used to store data for individual rows in the <see cref="T:Xomega.Framework.DataListObject"/>.
            It provides ability to compare rows using the list's sort criteria and some other utility functions.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataRow.GetValue(System.Object,System.String)">
            <summary>
            Gets internal value of the specified property from the given data row.
            </summary>
            <param name="dataItem">data row to get the data from.</param>
            <param name="property">proprety name to retrieve.</param>
        </member>
        <member name="M:Xomega.Framework.DataRow.GetString(System.Object,System.String)">
            <summary>
            Gets a string value of the specified property from the given data row.
            </summary>
            <param name="dataItem">data row to get the data from.</param>
            <param name="property">proprety name to retrieve.</param>
        </member>
        <member name="M:Xomega.Framework.DataRow.Get(System.Object,System.String,Xomega.Framework.ValueFormat)">
            <summary>
            Gets a value of the specified property from the given data row.
            </summary>
            <param name="dataItem">data row to get the data from.</param>
            <param name="property">proprety name to retrieve.</param>
            <param name="format">value format to return.</param>
            <returns></returns>
        </member>
        <member name="M:Xomega.Framework.DataRow.#ctor(Xomega.Framework.DataListObject)">
            <summary>
            Constructs a new data row for the specified data list object.
            </summary>
            <param name="dataList">Data list object that contains this row.</param>
        </member>
        <member name="M:Xomega.Framework.DataRow.CopyFrom(Xomega.Framework.DataRow)">
            <summary>
            Copy of a row from another row.
            </summary>
            <param name="otherRow">Another row to copy from.</param>
        </member>
        <member name="M:Xomega.Framework.DataRow.CompareTo(Xomega.Framework.DataRow)">
            <summary>
            Implementation of the IComparable interface for DataRow classes. Compares this row
            with the other row provided using the sort criteria of the parent list object.
            </summary>
            <param name="other">The other data row to compare this row to.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects
            being compared. The return value has the following meanings: Value Meaning
            Less than zero This object is less than the other parameter. Zero This object
            is equal to other. Greater than zero This object is greater than other.</returns>
        </member>
        <member name="P:Xomega.Framework.DataRow.List">
            <summary>
            The parent data list object for this data row.
            </summary>
        </member>
        <member name="T:Xomega.Framework.ListSortCriteria">
            <summary>
            A class that represents sort criteria for a list.
            </summary>
        </member>
        <member name="T:Xomega.Framework.ListSortField">
            <summary>
            A class that represents an individual sort field with a property name and a sort direction.
            </summary>
        </member>
        <member name="P:Xomega.Framework.ListSortField.PropertyName">
            <summary>
            The property name to sort by.
            </summary>
        </member>
        <member name="P:Xomega.Framework.ListSortField.SortDirection">
            <summary>
            The sort direction: ascending or descending.
            </summary>
        </member>
        <member name="T:Xomega.Framework.ListSortDirection">
            <summary>
            A class that represents a sort direction.
            </summary>
        </member>
        <member name="F:Xomega.Framework.ListSortDirection.Ascending">
            <summary>
            A static value that represents an ascending sort order.
            </summary>
        </member>
        <member name="F:Xomega.Framework.ListSortDirection.Descending">
            <summary>
            A static value that represents a descending sort order.
            </summary>
        </member>
        <member name="M:Xomega.Framework.ListSortDirection.#ctor">
            <summary>
            A nonpublic constructor.
            </summary>
        </member>
        <member name="M:Xomega.Framework.ListSortDirection.Toggle(Xomega.Framework.ListSortDirection)">
            <summary>
            A static method that toggles the given sort direction.
            </summary>
            <param name="direction">The sort direction to toggle.</param>
            <returns>A toggled sort direction.</returns>
        </member>
        <member name="T:Xomega.Framework.IDataObjectList">
            <summary>
            An interface implemented by child or parent data object lists.
            </summary>
        </member>
        <member name="M:Xomega.Framework.IDataObjectList.NewDataObject">
            <summary>
            Constructs a new data object of the appropriate type for the data object list.
            </summary>
            <returns>A new data object of the appropriate type for the data object list.</returns>
        </member>
        <member name="M:Xomega.Framework.IDataObjectList.ToDataContract(System.Collections.IList)">
            <summary>
            Exports the data from the data object list to the list of data contract objects.
            </summary>
            <param name="list">The list of data contract objects to export the data to.</param>
        </member>
        <member name="M:Xomega.Framework.IDataObjectList.Sort">
            <summary>
            Sorts the data object list according to the specified <see cref="P:Xomega.Framework.IDataObjectList.SortCriteria"/>.
            </summary>
        </member>
        <member name="P:Xomega.Framework.IDataObjectList.SortCriteria">
            <summary>
            Gets or sets sort criteria for the data object list.
            </summary>
        </member>
        <member name="P:Xomega.Framework.IDataObjectList.EditObject">
            <summary>
            Gets or sets a data object that is currently being edited.
            </summary>
        </member>
        <member name="T:Xomega.Framework.DataObjectList`1">
            <summary>
            A dynamic list of data objects of a certain type, which can be used independently
            or as a child object of another data object. It is also a parent for all its contained objects.
            A data object list supports validation and modification tracking as well as
            exporting its data to or importing it from a data contract that is a list of data contract objects.
            It also supports manipulating certain aspects of the properties for all data objects in the list,
            such as visibility, editability or whether or not the property is required. This way, for example,
            if a data object list is bound to a data grid, one could hide or unhide the whole column on the grid
            by setting the visibility of the corresponding data object list property.
            </summary>
            <typeparam name="T">The type of the underlying data object, which should have a default constructor.</typeparam>
        </member>
        <member name="F:Xomega.Framework.DataObjectList`1.template">
            <summary>
            A template data object for controlling properties of all data objects in the list.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.#ctor">
            <summary>
            Constructs a new data object list.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.Sort">
            <summary>
            Sorts the data object list according to the specified <see cref="P:Xomega.Framework.DataObjectList`1.SortCriteria"/>.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the data object list according to the specified comparison function.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.IsPropertyEditable(Xomega.Framework.BaseProperty)">
            <summary>
            Delegates determining property editability to the template object.
            </summary>
            <param name="p">The property to check the editability of.</param>
            <returns>True if the property should be editable, false otherwise.</returns>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.IsPropertyRequired(Xomega.Framework.BaseProperty)">
            <summary>
            Delegates determining if property is required to the template object.
            </summary>
            <param name="p">The property being checked if it's required.</param>
            <returns>True if the property should be required, false otherwise.</returns>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.IsPropertyVisible(Xomega.Framework.BaseProperty)">
            <summary>
            Delegates determining property visibility to the template object.
            </summary>
            <param name="p">The property to check the visibility of.</param>
            <returns>True if the property should be visible, false otherwise.</returns>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.FirePropertyChange(Xomega.Framework.PropertyChangeEventArgs)">
            <summary>
            Fires a property change event on the template object.
            </summary>
            <param name="args">Property change event arguments.</param>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.CopyFrom(Xomega.Framework.IDataObject)">
            <summary>
            Perform a deep copy of the state from another data object list (presumably of the same type).
            </summary>
            <param name="obj">The object to copy the state from.</param>
        </member>
        <member name="F:Xomega.Framework.DataObjectList`1.validationErrorList">
            <summary>
            A list of validation errors that are not tied to any particular
            data property but rather to the data object list as a whole.
            Null value means that the object list has not been validated yet.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.ResetValidation">
            <summary>
            Resets validation status to not validated on the object list
            by setting the validation error list to null.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.Validate(System.Boolean)">
            <summary>
            Validates the data object list and all its contained objects recursively.
            </summary>
            <param name="force">True to validate regardless of
            whether or not it has been already validated.</param>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.GetValidationErrors">
            <summary>
            Gets all validation errors from the data object list and all its contained objects recursively.
            </summary>
            <returns>Validation errors from the data object and all its contained objects.</returns>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.ResetAllValidation">
            <summary>
            Resets validation status to not validated on the object list
            and all its contained objects recursively.
            </summary>
        </member>
        <member name="F:Xomega.Framework.DataObjectList`1.modified">
            <summary>
            Tracks the modification state of the data object list,
            which includes if any new objects have been added or any existing objects have been deleted or modified.
            Null means the date object list has never been initialized with data.
            False means the data object list has been initialized, but has not been changed since then.
            True means that the data object list has been modified since it was initialized.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.IsModified">
            <summary>
            Returns the modification state of the data object list,
            which includes if any new objects have been added or any existing objects have been deleted or modified.
            </summary>
            <returns>The modification state of the data object list.
            Null means the date object list has never been initialized with data.
            False means the data object list has been initialized, but has not been changed since then.
            True means that the data object list has been modified since it was initialized.</returns>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.SetModified(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Sets the modification state for the data object list to the specified value.
            </summary>
            <param name="modified">The modification state value.
            Null means the date object list has never been initialized with data.
            False means the data object list has been initialized, but has not been changed since then.
            True means that the data object list has been modified since it was initialized.</param>
            <param name="recursive">True to propagate the modification state
            to all contained objects, false otherwise.</param>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.NewDataObject">
            <summary>
            Constructs a new data object of the appropriate type for the data object list.
            </summary>
            <returns>A new data object of the appropriate type for the data object list.</returns>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Tracks changes to the list of objects to update the modification state
            as well as the parent object on all objects that have been added or deleted.
            </summary>
            <param name="e">Collection change event arguments.</param>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.FromDataContract(System.Collections.IEnumerable)">
            <summary>
            Populates the data object list and imports the data from the given data contract list.
            </summary>
            <param name="list">A list of data contract objects to populate the list from.</param>
        </member>
        <member name="M:Xomega.Framework.DataObjectList`1.ToDataContract(System.Collections.IList)">
            <summary>
            Exports the data from the data object list to the list of data contract objects.
            </summary>
            <param name="list">The list of data contract objects to export the data to.
            The list should be generic with a single type parameter.</param>
        </member>
        <member name="P:Xomega.Framework.DataObjectList`1.Item(System.String)">
            <summary>
            Returns a template property for the whole list by the property name.
            It corresponds to a whole column in a grid, which could be controlled through this property.
            Because there is no real data in template properties, an instance of <c>BaseProperty</c>
            is returned as opposed to a regular <c>DataProperty</c>.
            </summary>
            <param name="propertyName">The name of the property to return.</param>
            <returns>A base property that represents a column in the data object list.</returns>
        </member>
        <member name="P:Xomega.Framework.DataObjectList`1.SortCriteria">
            <summary>
            Gets or sets sort criteria for the data object list.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataObjectList`1.Parent">
            <summary>
            Gets or sets the parent object for the current data object list.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataObjectList`1.Editable">
            <summary>
            Returns if the current data object list is editable, which may be based on several factors.
            Allows making the object non-editable by setting this field to true.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataObjectList`1.EditObject">
            <summary>
            Gets or sets a data object that is currently being edited.
            </summary>
        </member>
        <member name="T:Xomega.Framework.AccessLevel">
            <summary>
            Enumeration for different security access levels, which can be associated with properties,
            data objects or other elements that require security.
            The access level enumeration constants are listed in the ascending order, so that they can be compared
            using the standard 'greater than', 'less than' and 'equals' operators.
            </summary>
        </member>
        <member name="F:Xomega.Framework.AccessLevel.None">
            <summary>
            The constant indicating no access to the given element.
            The user can neither view nor modify the element.
            </summary>
        </member>
        <member name="F:Xomega.Framework.AccessLevel.ReadOnly">
            <summary>
            The constant indicating view/read only access to the given element.
            The user can view the element, but not modify it.
            </summary>
        </member>
        <member name="F:Xomega.Framework.AccessLevel.Full">
            <summary>
            The constant indicating full access to the given element.
            The user can both view and modify the element.
            </summary>
        </member>
        <member name="T:Xomega.Framework.BaseProperty">
            <summary>
            The base class for all Xomega properties that defines various additional meta-information
            that can be associated with a piece of data, such as description, editability, visibility,
            security, whether or not it is required, etc. It also provides support for notification
            of any changes in this type of information.
            Xomega properties are typically added to Xomega data objects that can serve as a data model
            for user interface screens.
            </summary>
        </member>
        <member name="F:Xomega.Framework.BaseProperty.fmt">
            <summary>
            Triggers <see cref="M:Xomega.Framework.ValueFormat.StartUp"/> method if called first.
            </summary>
        </member>
        <member name="F:Xomega.Framework.BaseProperty.parent">
            <summary>
            The parent data object of the property if any. In rare cases the parent can be set to null
            and therefore should be always checked for null.
            </summary>
        </member>
        <member name="M:Xomega.Framework.BaseProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
            Constructs a base property with the given name and a parent data object.
            </summary>
            <param name="parent">The parent data object for the property.</param>
            <param name="name">Property name that should be unique within the parent object.</param>
        </member>
        <member name="M:Xomega.Framework.BaseProperty.GetParent">
            <summary>
            Returns the parent data object of the property when set, null otherwise.
            </summary>
            <returns>The parent data object of the property.</returns>
        </member>
        <member name="M:Xomega.Framework.BaseProperty.Initialize">
            <summary>
            Performs additional property initialization after all other properties and child objects
            have been already added to the parent object and would be accessible from within this method.
            </summary>
        </member>
        <member name="M:Xomega.Framework.BaseProperty.ToString">
            <summary>
            Returns a user-friendly string representation of the property.
            </summary>
            <returns>The property label if it has been set, otherwise the property name
            converted to words if Pascal case is used.</returns>
        </member>
        <member name="M:Xomega.Framework.BaseProperty.FirePropertyChange(Xomega.Framework.PropertyChangeEventArgs)">
            <summary>
            A method to fire a property change event.
            If certain property information is calculated and depends on the factors
            that are outside of the property's control (e.g. editability), 
            then this method may need to be called from outside to fire a property change event
            if certain conditions that affect the calculated value have changed.
            </summary>
            <param name="args">Property change event arguments.</param>
        </member>
        <member name="F:Xomega.Framework.BaseProperty.editable">
            <summary>
            An internal flag to allow manually making the property uneditable.
            The default value is true.
            </summary>
        </member>
        <member name="F:Xomega.Framework.BaseProperty.editing">
            <summary>
            An internal flag that keeps track of whether or not the property is currently being edited.
            </summary>
        </member>
        <member name="F:Xomega.Framework.BaseProperty.visible">
            <summary>
            A internal flag to allow manually making the property invisible.
            The default value is true.
            </summary>
        </member>
        <member name="F:Xomega.Framework.BaseProperty.required">
            <summary>
            A internal flag that keeps track of whether or not the property is required.
            The default value is false.
            </summary>
        </member>
        <member name="F:Xomega.Framework.BaseProperty.accessLevel">
            <summary>
            Internal field that stores the security access level for the property.
            The default value is full access.
            </summary>
        </member>
        <member name="M:Xomega.Framework.BaseProperty.IsRestricted">
            <summary>
             Checks if the property is restricted, i.e. there is no access level.
            </summary>
            <returns>True if the access level is None, false otherwise.</returns>
        </member>
        <member name="P:Xomega.Framework.BaseProperty.Name">
            <summary>
            Internal property name, which should be unique within its parent object.
            </summary>
        </member>
        <member name="P:Xomega.Framework.BaseProperty.Label">
            <summary>
            User-friendly property label that can be used in error messages and other places
            to identify the property for the user.
            </summary>
        </member>
        <member name="E:Xomega.Framework.BaseProperty.Change">
            <summary>
            Generic property change event for listening to all changes to the property.
            </summary>
        </member>
        <member name="P:Xomega.Framework.BaseProperty.Editable">
            <summary>
            Returns a value indicating whether or not the property is editable.
            This value is calculated based on the internal value of the editable field,
            the result of the call delegated to the parent object to determine this property's editability
            and the value of the security access level. Controls bound to this property
            should update their editability based on this value.
            Setting this value updates the internal editable flag and fires the property change event if necessary.
            </summary>
        </member>
        <member name="P:Xomega.Framework.BaseProperty.Editing">
            <summary>
            Returns whether or not the property is currently being edited by the user.
            Controls that are bound to this property should set this value to true or false
            when they gain or lose focus respectively.
            </summary>
        </member>
        <member name="P:Xomega.Framework.BaseProperty.Visible">
            <summary>
            Returns a value indicating whether or not the property is visible.
            This value is calculated based on the internal value of the visible field,
            the result of the call delegated to the parent object to determine this property's visibility
            and the value of the security access level. Controls bound to this property
            should update their visibility based on this value.
            Setting this value updates the internal visible flag and fires the property change event if necessary.
            </summary>
        </member>
        <member name="P:Xomega.Framework.BaseProperty.Required">
            <summary>
            Returns a value indicating whether or not the property is required.
            This value is calculated based on the internal value of the required field and
            the result of the call delegated to the parent object to determine if this property is required.
            Setting this value updates the internal required flag and fires the property change event if necessary.
            </summary>
        </member>
        <member name="P:Xomega.Framework.BaseProperty.AccessLevel">
            <summary>
            Returns the current access level for the property.
            Allows setting a new access level and fires a property change event
            for property editability and visibility, since they both depend on the security access level.
            </summary>
        </member>
        <member name="T:Xomega.Framework.Properties.BooleanProperty">
            <summary>
            A data property that holds Boolean values.
            </summary>
        </member>
        <member name="T:Xomega.Framework.DataProperty`1">
            <summary>
            A generic typed data property that provides typed access
            to the underlying value or list of values as appropriate.
            </summary>
            <typeparam name="T">The type of the underlying property value.</typeparam>
        </member>
        <member name="T:Xomega.Framework.DataProperty">
            <summary>
            A base class for properties that contain a piece of data.
            The data could be a single value or a list of values based on the property's <c>IsMultiValued</c> flag.
            While the member to store the value is untyped, the actual values stored in the property
            are always converted to the internal format whenever possible, which would be typed.
            Data property also provides support for value conversion, validation and modification tracking.
            It can also provide a list of possible values (items) where applicable.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs the data property with a given name 
             and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="F:Xomega.Framework.DataProperty.value">
            <summary>
            The members to store the value of the data property.
            If the property is multivalued this will be pointing to a list of values.
            </summary>
        </member>
        <member name="F:Xomega.Framework.DataProperty.Column">
            <summary>
            The column index of the property when it is part of a data list object.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataProperty.SetTableColumn(System.Collections.IList,System.Int32)">
            <summary>
            Sets the table and the colunn index for this data property when it is part of a data list object.
            </summary>
            <param name="table"></param>
            <param name="index"></param>
        </member>
        <member name="M:Xomega.Framework.DataProperty.SetValue(System.Object)">
            <summary>
            Sets the value of the property and triggers a property change event.
            The value is first converted to the internal format if possible.
            </summary>
            <param name="val">The new value to set to the property.</param>
        </member>
        <member name="M:Xomega.Framework.DataProperty.IsNull">
            <summary>
            Checks if the current property value is null.
            </summary>
            <returns>True if the current property value is null, otherwise false.</returns>
        </member>
        <member name="F:Xomega.Framework.DataProperty.nullString">
            <summary>
            The string to display when the property value is null.
            Setting such string as a value will be considered as setting the value to null.
            The default is empty string.
            </summary>
        </member>
        <member name="F:Xomega.Framework.DataProperty.restrictedString">
            <summary>
            The string to display when the property value is restricted and not allowed to be viewed (e.g. N/A).
            The default is empty string.
            </summary>
        </member>
        <member name="F:Xomega.Framework.DataProperty.parseListSeparators">
            <summary>
            The separators to use for multivalued properties to parse the list of values from the input string.
            The default is comma, semicolon and a new line.
            </summary>
        </member>
        <member name="F:Xomega.Framework.DataProperty.displayListSeparator">
            <summary>
            The separator to use for multivalued properties to combine the list of values into a display string.
            The default is comma with a space.
            </summary>
        </member>
        <member name="F:Xomega.Framework.DataProperty.size">
            <summary>
            The maximum length for each property value when the value is of type string.
            The default is -1, which means there is no maximum length.
            </summary>
        </member>
        <member name="F:Xomega.Framework.DataProperty.ItemsProvider">
            <summary>
            A function to provide a list of possible values for the property where applicable.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataProperty.ListToString(System.Collections.IList,Xomega.Framework.ValueFormat)">
            <summary>
            Converts a list of values to a string for the given format.
            Default implementation uses the DisplayListSeparator to concatenate the values for any format.
            Subclasses can override this behavior to differentiate between the <c>DisplayString</c> format
            and the <c>EditString</c> format and can also provide custom delimiting, e.g. comma-separated
            and a new line between every five values to get five comma-separated values per line.
            </summary>
            <param name="list">The list of values to convert to string.</param>
            <param name="format">The string format for which the conversion is required.</param>
            <returns>The string representation of the given list.</returns>
        </member>
        <member name="M:Xomega.Framework.DataProperty.ValueToString(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Converts the specified value to the given string format as per the property conversion rules.
            Multiple values are each converted to the edit string format and combined into a delimited string.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The string format to use.</param>
            <returns>A string that represents the given value(s) in the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.DataProperty.IsValueNull(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            A function to determine if the given value is considered to be null for the given format.
            Default implementation returns true if the value is null, is an empty list,
            is a string with blank spaces only or is equal to the NullString for any format.
            Subclasses can override this function to differentiate by the value format
            or to provide different or additional rules.
            </summary>
            <param name="value">The value to check for null.</param>
            <param name="format">The value format, for which the null check is performed.</param>
            <returns>True if the value is considered to be null for the given format, otherwise false.</returns>
        </member>
        <member name="M:Xomega.Framework.DataProperty.ResolveValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Resolves the given value or a list of values to the specified format based on the current property configuration.
            If the property is restricted or the value is null and the format is string based,
            the <c> RestrictedString</c> or <c>NullString</c> are returned respectively.
            If the property is multivalued it will try to convert the value to a list or parse it into a list if it's a string
            or just add it to a new list as is and then convert each value in the list into the given format.
            Otherwise it will try to convert the single value to the given format.
            If a custom value converter is set on the property, it will be used first before the default property conversion rules are applied.
            </summary>
            <param name="value">The value or list of values to resolve to the given format.</param>
            <param name="format">The format to convert the value to.</param>
            <returns>A value or a list of values resolved to the given format based on the property configuration.</returns>
        </member>
        <member name="M:Xomega.Framework.DataProperty.CreateList(Xomega.Framework.ValueFormat)">
            <summary>
            Creates a new list for the given format. The default implementation just returns a new untyped ArrayList.
            Subclasses can override it to return typed generic lists for the Transport format.
            </summary>
            <param name="format">The format to create a new list for.</param>
            <returns>A new list for the given format.</returns>
        </member>
        <member name="F:Xomega.Framework.DataProperty.ValueConverter">
            <summary>
             A custom value converter that can be set on the property for converting values to a given format.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataProperty.ConvertValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Converts a single value to a given format. The default implementation does nothing to the value,
            but subclasses can implement the property specific rules for each format.
            </summary>
            <param name="value">A single value to convert to the given format.</param>
            <param name="format">The value format to convert the value to.</param>
            <returns>The value converted to the given format.</returns>
        </member>
        <member name="F:Xomega.Framework.DataProperty.modified">
            <summary>
            Tracks the modification state of the property. Null means the property value has never been set.
            False means the value has been set only once (initialized).
            True means that the value has been modified since it was initialized.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataProperty.ValidateOnStopEditing(System.Object,Xomega.Framework.PropertyChangeEventArgs)">
            <summary>
            A callback that validates the property when it stops being edited.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The callback arguments.</param>
        </member>
        <member name="F:Xomega.Framework.DataProperty.validationErrorList">
            <summary>
            A list of validation errors for the current property value.
            Null means that the validation has not been performed since the property value last changed.
            An empty list means that the validation has been performed and the value is valid.
            Non-empty list means that the value has been validated and is not valid if the list contains any errors.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataProperty.IsValid(System.Boolean)">
            <summary>
            Returns if the current property value has been validated and is valid, i.e. has no validation errors.
            </summary>
            <param name="validate">True to validate the property first if needed.</param>
            <returns>True if the current property has been validated and is valid, otherwise false.</returns>
        </member>
        <member name="M:Xomega.Framework.DataProperty.ResetValidation">
            <summary>
            Resets the validation status of the property to be non-validated by setting the list of validation errors to null.
            Fires the validation property change event as well. The validation status is reset automatically
            whenever the property value changes and can also be reset manually if the validation depends on external factors that have changed.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataProperty.Validate">
            <summary>
            Validates the property if it hasn't been validated yet.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataProperty.Validate(System.Boolean)">
            <summary>
            Validates the property and fires a validation property change event.
            </summary>
            <param name="force">True to validate regardless of whether or not it has been already validated.</param>
        </member>
        <member name="F:Xomega.Framework.DataProperty.Validator">
            <summary>
            A list of property validation functions. Validation functions can be added to 
            or removed from this list by using the standard + and - operators respectively.
            </summary>
        </member>
        <member name="M:Xomega.Framework.DataProperty.ValidateRequired(Xomega.Framework.DataProperty,System.Object)">
            <summary>
            A standard validation function that checks for null if the value is required.
            </summary>
            <param name="dp">Data property being validated.</param>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Xomega.Framework.DataProperty.CopyFrom(Xomega.Framework.DataProperty)">
            <summary>
            Copy value and state from another property (presumably of the same type).
            </summary>
            <param name="p">The property to copy the state from.</param>
        </member>
        <member name="P:Xomega.Framework.DataProperty.Row">
            <summary>
            The current row for the property when it is part of a data list object.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataProperty.InternalValue">
            <summary>
            Returns the property value as it is stored internally retrieving it from the current row if needed.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataProperty.DisplayStringValue">
            <summary>
            Returns the property value in a display string format.
            Multiple values are each converted to the display string format
            and combined into a delimited string.
            </summary>
            <seealso cref="F:Xomega.Framework.ValueFormat.DisplayString"/>
        </member>
        <member name="P:Xomega.Framework.DataProperty.EditStringValue">
            <summary>
            Returns the property value in an edit string format.
            Multiple values are each converted to the edit string format
            and combined into a delimited string.
            </summary>
            <seealso cref="F:Xomega.Framework.ValueFormat.EditString"/>
        </member>
        <member name="P:Xomega.Framework.DataProperty.TransportValue">
            <summary>
            Returns the property value in a transport format.
            Multiple values will be returned as a list of values converted to the transport format.
            </summary>
            <seealso cref="F:Xomega.Framework.ValueFormat.Transport"/>
        </member>
        <member name="P:Xomega.Framework.DataProperty.IsMultiValued">
            <summary>
            Gets or sets whether the property contains multiple values (a list) or a single value.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataProperty.NullString">
            <summary>
            Gets or sets the string to display when the property value is null.
            Setting such string as a value will be considered as setting the value to null.
            The default is empty string.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataProperty.RestrictedString">
            <summary>
            Gets or sets the string to display when the property value is restricted and not allowed to be viewed (e.g. N/A).
            The default is empty string.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataProperty.ParseListSeparators">
            <summary>
            Gets or sets the separators to use for multivalued properties to parse the list of values from the input string.
            The default is comma, semicolon and a new line.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataProperty.DisplayListSeparator">
            <summary>
            Gets or sets the separator to use for multivalued properties to combine the list of values into a display string.
            The default is comma with a space.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataProperty.Size">
            <summary>
            Gets or sets the maximum length for each property value when the value is of type string.
            The default is -1, which means there is no maximum length.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataProperty.Modified">
            <summary>
            Gets or sets the modification state of the property. Null means the property value has never been set.
            False means the value has been set only once (initialized).
            True means that the value has been modified since it was initialized.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataProperty.ValidationErrors">
            <summary>
            Returns the list of validation errors for the property.
            Null means that the validation has not been performed since the property value last changed.
            An empty list means that the validation has been performed and the value is valid.
            Non-empty list means that the value has been validated and is not valid if the list contains any errors.
            </summary>
        </member>
        <member name="T:Xomega.Framework.DataProperty.GetValueList">
            <summary>
            A delegate to provide a list of possible values given the user input so far.
            </summary>
            <param name="input">The user input so far.</param>
            <returns>A list of possible values.</returns>
        </member>
        <member name="T:Xomega.Framework.DataProperty.TryConvertValue">
            <summary>
            A delegate to support custom conversion functions. It will try to convert the value
            that is passed by reference to the specified format by setting the reference to the 
            converted value. It will return whether or not the conversion succeeded, which determines
            if further conversion rules need to be applied.
            If the delegate is only able to convert values to just one format, it should return false for other formats.
            </summary>
            <param name="value">A reference to the value to be converted.</param>
            <param name="format">The format to convert the value to.</param>
            <returns>True if the conversion succeeded, otherwise false.</returns>
        </member>
        <member name="T:Xomega.Framework.DataProperty.ValueValidator">
            <summary>
            A delegate to support custom validation functions.
            The delegate is multicast to allow combining multiple validation functions.
            </summary>
            <param name="prop">The data property being validated. The function can use
            the property configuration for validation or error messages. Result of the validation
            should be added to the property's validation error list.</param>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Xomega.Framework.DataProperty`1.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
            Constructs a generic typed data property with a given name
            and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.DataProperty`1.CreateList(Xomega.Framework.ValueFormat)">
            <summary>
            Creates a new list for the given format.
            Overrides the default behavior to return a typed generic list for the Transport format.
            </summary>
            <param name="format">The format to create a new list for.</param>
            <returns>A new list for the given format.</returns>
        </member>
        <member name="P:Xomega.Framework.DataProperty`1.Value">
            <summary>
            Gets or sets a single typed value for properties that are not multivalued.
            </summary>
        </member>
        <member name="P:Xomega.Framework.DataProperty`1.Values">
            <summary>
            Gets or sets a typed list of values for multivalued properties.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.BooleanProperty.TrueStrings">
            <summary>
            An array of strings that should be parsed as a true Boolean value.
            To default values are: "true", "1", "yes".
            It can also be set externally for a more precise control over this behavior.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.BooleanProperty.FalseStrings">
            <summary>
            An array of strings that should be parsed as a false Boolean value.
            To default values are: "false", "0", "no".
            It can also be set externally for a more precise control over this behavior.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.BooleanProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a BooleanProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.BooleanProperty.CreateList(Xomega.Framework.ValueFormat)">
            <summary>
            Overrides the base method to construct a list of non-Nullable Boolean values
            for the Transport format, since it's a value type.
            </summary>
            <param name="format">The format to create a new list for.</param>
            <returns>A new list for the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.BooleanProperty.ConvertValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Converts a single value to a given format. For typed formats
            this method tries to convert various types of values to a nullable Boolean
            and may utilize lists of strings that represent true or false values
            (see <see cref="F:Xomega.Framework.Properties.BooleanProperty.TrueStrings"/> and <see cref="F:Xomega.Framework.Properties.BooleanProperty.FalseStrings"/>).
            </summary>
            <param name="value">A single value to convert to the given format.</param>
            <param name="format">The value format to convert the value to.</param>
            <returns>The value converted to the given format.</returns>
        </member>
        <member name="T:Xomega.Framework.Properties.ComboProperty">
            <summary>
            A combo property allows displaying a read-only combination of the values
            from several other properties that is formatted according to the specified format string.
            Being a <see cref="T:Xomega.Framework.DataProperty"/> itself it can be bound to labels and other read-only text controls,
            and it will automatically reflect any changes in the underlying component properties.
            For example, you can display an address composed of several individual components
            like city, state and zipcode all in one field properly formatted.
            If no address fields are set though, it will show a blank string or your choice of a null value
            instead of a bunch of commas that you would get from the String.Format.
            You can also control this behavior and hide unwanted formatting if your address is partially blank.
            </summary>
            <seealso cref="P:Xomega.Framework.Properties.ComboProperty.Format"/>
        </member>
        <member name="M:Xomega.Framework.Properties.ComboProperty.#cctor">
            <summary>
            Instrumentation hook.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.ComboProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a ComboProperty with a given name 
             and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.ComboProperty.SetComponentProperties(Xomega.Framework.DataProperty[])">
            <summary>
            Sets the component properties that this combo property is based on.
            Also subscribes to listen for changes in those properties
            in order to retransmit the event and get the combo value refreshed.
            </summary>
            <param name="properties">An array of component properties for the current combo property.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.ComboProperty.ComponentPropertyChange(System.Object,Xomega.Framework.PropertyChangeEventArgs)">
            <summary>
            Retransmits property change events from any of the component properties
            as its own property change event, so that the combined value would be refreshed.
            </summary>
            <param name="property">The component property that was changed.</param>
            <param name="eventArgs">Event arguments that describe the property change.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.ComboProperty.ListToString(System.Collections.IList,Xomega.Framework.ValueFormat)">
            <summary>
            Overrides the base method to format a list of values according to the specified format string.
            </summary>
            <param name="list">The list of values to convert to string.</param>
            <param name="format">The string format for which the conversion is required.</param>
            <returns>The string representation of the given list.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.ComboProperty.IsValueNull(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Overrides the base method to return null if all properties are null for a string format.
            If the values are not properties then it returns false, so that they would still be added
            to the list that is passed to the <see cref="M:Xomega.Framework.Properties.ComboProperty.ListToString(System.Collections.IList,Xomega.Framework.ValueFormat)"/> method.
            </summary>
            <param name="value">The value to check for null.</param>
            <param name="format">The value format, for which the null check is performed.</param>
            <returns>True if the value is considered to be null for the given format, otherwise false.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.ComboProperty.ConvertValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Overrides the base method if the value passed is a data property
            to return the value of that property in the specified format.
            </summary>
            <param name="value">A single value to convert to the given format.</param>
            <param name="format">The value format to convert the value to.</param>
            <returns>The value converted to the given format.</returns>
        </member>
        <member name="P:Xomega.Framework.Properties.ComboProperty.Format">
            <summary>
            The format string with placeholders for the component values
            that is used to build the combo value. The placeholders are numbers in curly braces,
            e.g. {0}, where the number corresponds to the index of each component property
            as set in the <see cref="M:Xomega.Framework.Properties.ComboProperty.SetComponentProperties(Xomega.Framework.DataProperty[])"/> method.
            If any adjacent part of the static format should not be shown when the value is blank,
            then these parts should be placed inside the curly braces
            and the number should be marked with a preceding $.
            For example, the placeholder { ($1)} will show the value of the second property in parenthesis,
            but won't show anything if that value is blank as opposed to showing empty parenthesis.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Properties.ComboProperty.TrimValues">
            <summary>
            A flag indicating whether or not to trim component values
            when building the combo value.  The default is true.
            </summary>
        </member>
        <member name="T:Xomega.Framework.Properties.EnumBoolProperty">
            <summary>
            A subtype of enumeration properties where the items represent boolean values.
            It uses the <c>bool</c> type for the transport format.
            </summary>
        </member>
        <member name="T:Xomega.Framework.Properties.EnumProperty">
            <summary>
            A data property that has enumerated set of possible values
            that come from a lookup table of the specified type.
            Internally the values are stored as objects of type <see cref="T:Xomega.Framework.Header"/>,
            which can store ID, text and a number of additional attributes for the value.
            When a value is being set to the property it tries to resolve it to a Header
            by looking it up in the lookup table for the property, which is obtained
            from a lookup cache of a given type.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs an EnumProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumProperty.CreateList(Xomega.Framework.ValueFormat)">
            <summary>
            Overrides the base method to construct a list of string values for the Transport format.
            </summary>
            <param name="format">The format to create a new list for.</param>
            <returns>A new list for the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumProperty.GetLookupTable">
            <summary>
            Gets the lookup table for the property. The default implementation uses the <see cref="P:Xomega.Framework.Properties.EnumProperty.EnumType"/>
            to find the lookup table in the lookup cache specified by the <see cref="P:Xomega.Framework.Properties.EnumProperty.CacheType"/>.
            Subclasses can override this behavior to get a lookup table from a local class member or elsewhere.
            </summary>
            <returns>The lookup table to be used for the property.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumProperty.IsValueNull(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            A function to determine if the given value is considered to be null for the given format.
            Overrides the base implementation to convert value for string formats.
            </summary>
            <param name="value">The value to check for null.</param>
            <param name="format">The value format, for which the null check is performed.</param>
            <returns>True if the value is considered to be null for the given format, otherwise false.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumProperty.ConvertValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Converts a single value to a given format. For internal format
            this method tries to convert the value to a header by looking it up
            in the lookup table. For the transport format it uses the header ID.
            For DisplayString and EditString formats it displays the header formatted according
            to the specified <see cref="P:Xomega.Framework.Properties.EnumProperty.DisplayFormat"/> or <see cref="P:Xomega.Framework.Properties.EnumProperty.KeyFormat"/> respectively.
            </summary>
            <param name="value">A single value to convert to the given format.</param>
            <param name="format">The value format to convert the value to.</param>
            <returns>The value converted to the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumProperty.GetItems(System.Object)">
            <summary>
            A function that is used by default as the possible items provider
            for the property by getting all possible values from the lookup table
            filtered by the specified filter function if any and ordered by
            the specified SortField function if any.
            </summary>
            <param name="input">The user input so far.</param>
            <returns>A list of possible values.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumProperty.IsAllowed(Xomega.Framework.Header)">
            <summary>
            Checks if the given header is an allowed possible value.
            By default all active headers are allowed.
            This is the default filter function.
            </summary>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="F:Xomega.Framework.Properties.EnumProperty.FilterFunc">
            <summary>
            A function to filter allowed items.
            By default only active items are allowed.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.EnumProperty.SortField">
            <summary>
            A function that extracts an item field to be used for sorting.
            By default items are sorted by their display string.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumProperty.DefaultSortField(Xomega.Framework.Header)">
            <summary>
            Returns a value or a combination of values from the given header
            that should be used for sorting headers between each other.
            This is a default SortField function that sorts headers by their display string.
            </summary>
            <param name="h">The header from which to get the sort field.</param>
            <returns>A value or a combination of values from the given header
            that should be used for sorting headers between each other.</returns>
        </member>
        <member name="F:Xomega.Framework.Properties.EnumProperty.cascadingProperties">
            <summary>
            A dictionary that maps additional attributes that each possible value of this property may have
            to other properties that could be used to implement cascading restrictions of the possible values
            based on the current values of other properties.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumProperty.SetCascadingProperty(System.String,Xomega.Framework.DataProperty)">
            <summary>
            Makes the list of possible values dependent on the current value(s) of another property,
            which would be used to filter the list of possible values by the specified attribute.
            </summary>
            <param name="attribute">The name of the attribute of each possible value
            that will be matched against the current value(s) of the given data property.</param>
            <param name="prop">The cascading property that the list of possible values
            for the current property depends on.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumProperty.CascadingPropertyChange(System.Object,Xomega.Framework.PropertyChangeEventArgs)">
            <summary>
            Listens to the changes in values of the cascading properties and clears any current values
            that no longer match the values of the cascading properties. Also fires an event
            to notify the listeners that the list of possible values changed.
            </summary>
            <param name="property">The cascading property that was changed.</param>
            <param name="eventArgs">Event arguments that describe the property change.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumProperty.MatchesCascadingProperties(Xomega.Framework.Header)">
            <summary>
            The method that determines if a given possible value matches the current values
            of all cascading properties using the attribute specified for each property.
            Cascading properties with blank values are ignored, i.e. a blank value
            is considered to match any value.
            This method is used as part of the default filter function <see cref="M:Xomega.Framework.Properties.EnumProperty.IsAllowed(Xomega.Framework.Header)"/>,
            but can also be used separately as part of a custom filter function.
            </summary>
            <param name="h">The possible value to match against cascading properties.
            It should have the same attributes as specified for each cascading property.</param>
            <returns>True, if the specified value matches the current value(s) of all cascading properties,
            false otherwise.</returns>
        </member>
        <member name="P:Xomega.Framework.Properties.EnumProperty.CascadingUsed">
            <summary>
            Instrumentation hook.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Properties.EnumProperty.CacheType">
            <summary>
            The type of cache to use to obtain the lookup table.
            By default the <see cref="F:Xomega.Framework.Lookup.LookupCache.Global"/> cache is used, which is shared across the whole application.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Properties.EnumProperty.EnumType">
            <summary>
            Enumeration type, which is the type of a lookup table in the cache to be used for the property.
            This field should be initialized externally by either a subclass property
            or from within the data object.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Properties.EnumProperty.KeyFormat">
            <summary>
            The string format that is used to obtain the key field from the Header.
            The default value points to the header ID (see <see cref="F:Xomega.Framework.Header.FieldId"/>),
            but it can be customized to point to another unique field or a combination of fields
            in the header, e.g. a custom attribute that stores a unique abbreviation.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Properties.EnumProperty.DisplayFormat">
            <summary>
            The string format for a header field or combination of fields that is used
            to display the header as a string. The default value is to display the header text
            (see <see cref="F:Xomega.Framework.Header.FieldText"/>).
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumBoolProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs an EnumBoolProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumBoolProperty.CreateList(Xomega.Framework.ValueFormat)">
            <summary>
            Overrides the base method to construct a list of boolean values for the Transport format.
            </summary>
            <param name="format">The format to create a new list for.</param>
            <returns>A new list for the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumBoolProperty.ConvertValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Converts a single value to a given format.
            For the transport format it uses the header ID converted to a boolean.
            </summary>
            <param name="value">A single value to convert to the given format.</param>
            <param name="format">The value format to convert the value to.</param>
            <returns>The value converted to the given format.</returns>
        </member>
        <member name="T:Xomega.Framework.Properties.EnumGuidProperty">
            <summary>
            A subtype of enumeration properties where the header IDs are always Guids.
            It uses the <c>Guid</c> type for the transport format.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumGuidProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs an EnumGuidProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumGuidProperty.CreateList(Xomega.Framework.ValueFormat)">
            <summary>
            Overrides the base method to construct a list of Guid values for the Transport format.
            </summary>
            <param name="format">The format to create a new list for.</param>
            <returns>A new list for the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumGuidProperty.ConvertValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Converts a single value to a given format.
            For the transport format it uses the header ID converted as a Guid.
            </summary>
            <param name="value">A single value to convert to the given format.</param>
            <param name="format">The value format to convert the value to.</param>
            <returns>The value converted to the given format.</returns>
        </member>
        <member name="T:Xomega.Framework.ValueFormat">
            <summary>
            A class that represents different formats that data property values can be converted to.
            </summary>
        </member>
        <member name="F:Xomega.Framework.ValueFormat.Internal">
            <summary>
            The format in which values are stored internally in data properties.
            The format is typically typed, that is an integer would be stored as an <c>int</c>.
            Whenever a value is set on a data property, it will always try to convert it 
            to the internal format first. If it fails to convert it, it may store it as is.
            For multivalued data properties, each value in the list will be converted to an internal format.
            </summary>
        </member>
        <member name="F:Xomega.Framework.ValueFormat.Transport">
            <summary>
            The format in which data property values are transported between layers
            during a service call. The format is typically typed and may or may not be
            the same as the internal format. For example, we may want to store a resolved
            <c>Header</c> object internally, but send only the ID part in a service call.
            </summary>
        </member>
        <member name="F:Xomega.Framework.ValueFormat.EditString">
            <summary>
            The string format in which the user inputs the value. It may or may not be the same
            as the format in which the value is displayed to the user when it's not editable.
            </summary>
        </member>
        <member name="F:Xomega.Framework.ValueFormat.DisplayString">
            <summary>
            The string format in which the value is displayed to the user when it's not editable.
            When internal value is an object such as <c>Header</c>, the display string may
            consist of a combination of several of its parts (see <see cref="M:Xomega.Framework.Header.ToString(System.String)"/>).
            </summary>
        </member>
        <member name="M:Xomega.Framework.ValueFormat.IsString">
            <summary>
            Checks if the current format is one of the string formats.
            </summary>
            <returns>True this is a string format, otherwise false</returns>
        </member>
        <member name="M:Xomega.Framework.ValueFormat.IsTyped">
            <summary>
            Checks if the current format is one of the typed formats.
            </summary>
            <returns>True this is a typed format, otherwise false</returns>
        </member>
        <member name="M:Xomega.Framework.ValueFormat.#ctor">
            <summary>
            Protected constructor to allow defining additional value formats through subclasses.
            </summary>
        </member>
        <member name="M:Xomega.Framework.ValueFormat.Finalize">
            <summary>
            Finalizer that calls application shutdown hook.
            </summary>
        </member>
        <member name="F:Xomega.Framework.ValueFormat.startedUp">
            <summary>
            A flag to track the startup status.
            </summary>
        </member>
        <member name="M:Xomega.Framework.ValueFormat.StartUp">
            <summary>
            A startup hook that Dotfuscator can set the Setup attribute for.
            </summary>
        </member>
        <member name="F:Xomega.Framework.ValueFormat.shutDown">
            <summary>
            A flag to track the shutdown status.
            </summary>
        </member>
        <member name="M:Xomega.Framework.ValueFormat.ShutDown">
            <summary>
            A shutdown hook that Dotfuscator can set the Teardown attribute for.
            </summary>
        </member>
        <member name="T:Xomega.Framework.Properties.MoneyProperty">
            <summary>
            A decimal property that holds a monetary or currency value.
            </summary>
        </member>
        <member name="T:Xomega.Framework.Properties.DecimalProperty">
            <summary>
            A data property that holds decimal values.
            The CLR type for those will be in Nullable decimal.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.DecimalProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a DecimalProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.DecimalProperty.CreateList(Xomega.Framework.ValueFormat)">
            <summary>
            Overrides the base method to construct a list of non-Nullable decimal values
            for the Transport format, since it's a value type.
            </summary>
            <param name="format">The format to create a new list for.</param>
            <returns>A new list for the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.DecimalProperty.ConvertValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Converts a single value to a given format. For typed formats
            this method tries to convert various types of values to a nullable decimal.
            For string formats it displays the internal decimal formatted according
            to the specified <see cref="P:Xomega.Framework.Properties.DecimalProperty.DisplayFormat"/> if set.
            </summary>
            <param name="value">A single value to convert to the given format.</param>
            <param name="format">The value format to convert the value to.</param>
            <returns>The value converted to the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.DecimalProperty.ValidateDecimal(Xomega.Framework.DataProperty,System.Object)">
            <summary>
            A validation function that checks if the value is a decimal and reports a validation error if not.
            </summary>
            <param name="dp">Data property being validated.</param>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.DecimalProperty.ValidateMinimum(Xomega.Framework.DataProperty,System.Object)">
            <summary>
            A validation function that checks if the value is a decimal that is not less
            than the property minimum and reports a validation error if it is.
            </summary>
            <param name="dp">Data property being validated.</param>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.DecimalProperty.ValidateMaximum(Xomega.Framework.DataProperty,System.Object)">
            <summary>
            A validation function that checks if the value is a decimal that is not greater
            than the property maximum and reports a validation error if it is.
            </summary>
            <param name="dp">Data property being validated.</param>
            <param name="value">The value to validate.</param>
        </member>
        <member name="P:Xomega.Framework.Properties.DecimalProperty.MinimumValue">
            <summary>
            The minimum valid value for the property.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Properties.DecimalProperty.MaximumValue">
            <summary>
            The maximum valid value for the property.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Properties.DecimalProperty.ParseStyles">
            <summary>
            A combination of styles for parsing the decimal number.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Properties.DecimalProperty.DisplayFormat">
            <summary>
            The format for displaying the number as a string.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.MoneyProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a MoneyProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="T:Xomega.Framework.Properties.PositiveMoneyProperty">
            <summary>
            A money property for nonnegative amounts only.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.PositiveMoneyProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a PositiveMoneyProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="T:Xomega.Framework.Properties.EnumIntProperty">
            <summary>
            A subtype of enumeration properties where the header IDs are always integers.
            It uses the <c>int</c> type for the transport format.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumIntProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs an EnumIntProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumIntProperty.CreateList(Xomega.Framework.ValueFormat)">
            <summary>
            Overrides the base method to construct a list of integer values for the Transport format.
            </summary>
            <param name="format">The format to create a new list for.</param>
            <returns>A new list for the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.EnumIntProperty.ConvertValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Converts a single value to a given format.
            For the transport format it uses the header ID converted as an integer.
            </summary>
            <param name="value">A single value to convert to the given format.</param>
            <param name="format">The value format to convert the value to.</param>
            <returns>The value converted to the given format.</returns>
        </member>
        <member name="T:Xomega.Framework.Properties.GuidProperty">
            <summary>
            A data property that holds GUID type of values
            that can serve as globally unique identifiers.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.GuidProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a GuidProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.GuidProperty.CreateList(Xomega.Framework.ValueFormat)">
            <summary>
            Overrides the base method to construct a list of non-nullable Guid values
            for the Transport format, since it's a value type.
            </summary>
            <param name="format">The format to create a new list for.</param>
            <returns>A new list for the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.GuidProperty.ConvertValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Converts a single value to a given format. For typed formats
            this method tries to convert various types of values to a nullable Guid.
            </summary>
            <param name="value">A single value to convert to the given format.</param>
            <param name="format">The value format to convert the value to.</param>
            <returns>The value converted to the given format.</returns>
        </member>
        <member name="T:Xomega.Framework.Properties.OperatorProperty">
            <summary>
            A specialized enumeration property that provides operators for search criteria
            such as Is Equal, Is Not Equal, Contains, Between etc.
            This property can be coupled with additional one or two data properties
            that supply the values for the selected operator. Some operators
            require no additional values (e.g. Is Null or Is Not Null), most require
            one additional value (e.g. Is Equal, Is Greater Than, etc.) or list of values
            (Is One Of, Is None Of) and some require two additional properties
            for ranges (e.g. Between).
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.OperatorProperty.AttributeAddlProps">
            <summary>
            The name of the operator attribute that stores the number of additional
            properties of the operator requires: 0, 1 or 2.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.OperatorProperty.AttributeMultival">
            <summary>
            The name of the operator attribute that stores 1 or 0 to indicate
            if the additional property can be multivalued.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.OperatorProperty.AttributeType">
            <summary>
            The name of the operator attribute that stores a fully qualified type
            of the additional property, which this operator applies to.
            It will also apply to all subclasses of this type. Multiple types can be specified.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.OperatorProperty.AttributeExcludeType">
            <summary>
            The name of the operator attribute that stores a fully qualified type
            of the additional property, which this operator does not apply to.
            It won't also apply to all subclasses of this type. Multiple exclude types can be specified.
            Exclude types should be generally more concrete than include types.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.OperatorProperty.AttributeSortOrder">
            <summary>
            The name of the operator attribute that stores the sort order
            of the operators with respect to other operators.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.OperatorProperty.AttributeNullCheck">
            <summary>
            The name of the operator attribute that stores 1 for null check operators
            (Is Null or Is Not Null) to enable easily hiding or showing them.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.OperatorProperty.#cctor">
            <summary>
            Instrumentation hook.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.OperatorProperty.additionalProperty">
            <summary>
            An instance of the first additional property that is obtained from the parent object
            by <see cref="P:Xomega.Framework.Properties.OperatorProperty.AdditionalPropertyName"/> during initialization.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.OperatorProperty.additionalProperty2">
            <summary>
            An instance of the second additional property that is obtained from the parent object
            by <see cref="P:Xomega.Framework.Properties.OperatorProperty.AdditionalPropertyName2"/> during initialization.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.OperatorProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs an OperatorProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.OperatorProperty.Initialize">
            <summary>
            Initializes the instances of the additional properties by the corresponding property names,
            which could be defaulted during current property construction and possibly overwritten
            during the parent object initialization before this method is called.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.OperatorProperty.IsApplicable(Xomega.Framework.Header)">
            <summary>
            Determines if the given operator is applicable for the current additional properties
            by checking the first additional property type and whether or not it's multivalued
            and comparing it to the corresponding attributes of the given operator.
            This method is used as a filter function for the list of operators to display.
            </summary>
            <param name="oper">The operator to check.</param>
            <returns>True if the given operator is applicable, otherwise false.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.OperatorProperty.TypeMatches(System.Type,System.String)">
            <summary>
            Determines if the specified type or any of its base types match the provided name.
            </summary>
            <param name="t">The type to test.</param>
            <param name="name">The type name to match against.</param>
            <returns>True, if the type or any of its base type match the specified name.
            False otherwise.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.OperatorProperty.OnValueChanged(System.Object,Xomega.Framework.PropertyChangeEventArgs)">
            <summary>
            Updates the visibility and the Required flag of the additional properties
            based on the currently selected operator. This method is triggered
            whenever the current operator changes.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">Property change event arguments.</param>
        </member>
        <member name="P:Xomega.Framework.Properties.OperatorProperty.AdditionalPropertyName">
            <summary>
            Gets or sets the name of the first additional property.
            If the current operator property name ends with "Operator"
            then the first initial property name is defaulted to the first part
            of the current property name before the word "Operator".
            </summary>
        </member>
        <member name="P:Xomega.Framework.Properties.OperatorProperty.AdditionalPropertyName2">
            <summary>
            Gets or sets the name of the second additional property.
            If the first additional property name is initialized by default
            than the second additional property name is defaulted to the first one
            with the string "2" appended at the end.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Properties.OperatorProperty.HasNullCheck">
            <summary>
            Gets or sets a Boolean to enable or disable display of the null check operators.
            </summary>
        </member>
        <member name="T:Xomega.Framework.Properties.TextProperty">
            <summary>
            A data property that has a string value. The maximum length of the string
            can be specified by setting the <see cref="P:Xomega.Framework.DataProperty.Size"/> on the data property.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.TextProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a TextProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.TextProperty.ConvertValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Converts a single value to a given format, which is always a string.
            </summary>
            <param name="value">A single value to convert to the given format.</param>
            <param name="format">The value format to convert the value to.</param>
            <returns>The value converted to the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.TextProperty.ValidateSize(Xomega.Framework.DataProperty,System.Object)">
            <summary>
            A validation function that checks if the value length is not greater
            than the property size and reports a validation error if it is.
            </summary>
            <param name="dp">Data property being validated.</param>
            <param name="value">The value to validate.</param>
        </member>
        <member name="T:Xomega.Framework.Properties.PositiveDecimalProperty">
            <summary>
            A decimal property for positive numbers only.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.PositiveDecimalProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a PositiveDecimalProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="T:Xomega.Framework.Properties.DateTimeProperty">
            <summary>
            A data property that holds a date and time as a value.
            If the date and time cannot be parsed it holds the raw input value,
            but will fail validation.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.DateTimeProperty.DefaultDateTimeFormat">
            <summary>
            Default format for displaying the date and time.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.DateTimeProperty.Format">
            <summary>
            The format for displaying the date and time for the current property.
            It can be configured externally by setting it to a new value.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.DateTimeProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a DateTimeProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.DateTimeProperty.CreateList(Xomega.Framework.ValueFormat)">
            <summary>
            Overrides the base method to construct a list of non-Nullable DateTime values
            for the Transport format, since it's a value type.
            </summary>
            <param name="format">The format to create a new list for.</param>
            <returns>A new list for the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.DateTimeProperty.ConvertValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Converts a single value to a given format. For typed formats
            this method tries to convert various types of values to a nullable DateTime.
            For string formats it displays the internal DateTime formatted according
            to the specified <see cref="F:Xomega.Framework.Properties.DateTimeProperty.Format"/>.
            </summary>
            <param name="value">A single value to convert to the given format.</param>
            <param name="format">The value format to convert the value to.</param>
            <returns>The value converted to the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.DateTimeProperty.ValidateDateTime(Xomega.Framework.DataProperty,System.Object)">
            <summary>
            A validation function that checks if the value is a DateTime and reports a validation error if not.
            </summary>
            <param name="dp">Data property being validated.</param>
            <param name="value">The value to validate.</param>
        </member>
        <member name="T:Xomega.Framework.Properties.DateProperty">
            <summary>
            A DateTimeProperty for the date part only.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.DateProperty.DefaultDateFormat">
            <summary>
            Default format for displaying the date.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.DateProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a DateProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="T:Xomega.Framework.Properties.TimeProperty">
            <summary>
            A DateTimeProperty for the time part only.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.TimeProperty.DefaultTimeFormat">
            <summary>
            Default format for displaying the time.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Properties.TimeProperty.MinutesCentric">
            <summary>
            A Boolean flag to control whether to treat a single integer under 24
            as minutes or hours. The default is to treat it as hours.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.TimeProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a TimeProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.TimeProperty.ConvertValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Converts a single value to a given format. For typed formats
            this method tries to convert various types of values to a nullable DateTime.
            It also handles parsing strings that are input without a colon for speed entry (e.g. 1500).
            </summary>
            <param name="value">A single value to convert to the given format.</param>
            <param name="format">The value format to convert the value to.</param>
            <returns>The value converted to the given format.</returns>
        </member>
        <member name="T:Xomega.Framework.Lookup.ILookupCacheLoader">
            <summary>
            An interface for all lookup cache loaders, which can be statically registered with the LookupTable
            class and called by the framework to populate a given lookup table if it hasn't been loaded yet.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Lookup.ILookupCacheLoader.IsSupported(System.String,System.String)">
            <summary>
            Determines if the given cache type and table type are supported by the current cache loader.
            </summary>
            <param name="cacheType">The cache type to check.</param>
            <param name="tableType">The table type to check.</param>
            <returns>True, if the given cache type and table type are supported by the current cache loader,
            False otherwise.</returns>
        </member>
        <member name="M:Xomega.Framework.Lookup.ILookupCacheLoader.Load(Xomega.Framework.Lookup.LookupCache,System.String)">
            <summary>
            Loads a lookup table for the specified type into the given lookup cache.
            The implementation should check the cache type and the table type and do nothing
            if the current lookup cache loader is not applicable for those.
            </summary>
            <param name="cache">The lookup cache where to populate the lookup table.</param>
            <param name="tableType">The type of the lookup table to populate.</param>
        </member>
        <member name="T:Xomega.Framework.Lookup.LookupCacheLoader">
            <summary>
            A base abstract class for the lookup cache loader implementations.
            It is designed to support cache loaders that either explicitly specify the table types
            they can load or load all their lookup tables at once during the first time they run,
            which will determine their supported table types.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Lookup.LookupCacheLoader.cacheType">
            <summary>
            The cache type that this loader is designed for. This is null if any type is supported.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Lookup.LookupCacheLoader.supportedTypes">
            <summary>
            The list of supported table types, which is either
            specified initially or constructed from the first run.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Lookup.LookupCacheLoader.caseSensitive">
            <summary>
            Indicates whether or not the loaded lookup tables should be case sensitive.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupCacheLoader.#ctor(System.String,System.Boolean,System.String[])">
            <summary>
            Initializes base parameters of the lookup cache loader.
            </summary>
            <param name="cacheType">The cache type that this loader is designed for.
            It should be null if any type is supported.</param>
            <param name="caseSensitive">Indicates whether or not the loaded lookup tables should be case sensitive.</param>
            <param name="tableTypes">A list of lookup table types that this loader can load.
            If null, the list will be determined based on the first run.</param>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupCacheLoader.IsSupported(System.String,System.String)">
            <summary>
            Determines if the given cache type and table type are supported by the current cache loader.
            </summary>
            <param name="cacheType">The cache type to check.</param>
            <param name="tableType">The table type to check.</param>
            <returns>True, if the given cache type and table type are supported by the current cache loader,
            False otherwise.</returns>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupCacheLoader.Load(Xomega.Framework.Lookup.LookupCache,System.String)">
            <summary>
            Loads a lookup table for the specified type into the given lookup cache.
            Implementation of the corresponding interface method.
            </summary>
            <param name="cache">The lookup cache where to populate the lookup table.</param>
            <param name="tableType">The type of the lookup table to populate.</param>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupCacheLoader.LoadCache(System.String,Xomega.Framework.Lookup.LookupCacheLoader.CacheUpdater)">
            <summary>
            Subroutine implemented by subclasses to perform the actual loading
            of the lookup table and storing it in the cache using the provided updateCache delegate.
            The loading process can be either synchronous or asynchronous.
            </summary>
            <param name="tableType">The lookup table type to load.</param>
            <param name="updateCache">The method to call to store the loaded lookup table in the cache.</param>
        </member>
        <member name="T:Xomega.Framework.Lookup.LookupCacheLoader.CacheUpdater">
            <summary>
            A delegate that a subclass should call in the <see cref="M:Xomega.Framework.Lookup.LookupCacheLoader.LoadCache(System.String,Xomega.Framework.Lookup.LookupCacheLoader.CacheUpdater)"/> method after creating
            and loading a lookup table to actually store it in the cache.
            </summary>
            <param name="table">The created and loaded LookupTable to be stored in the cache.</param>
        </member>
        <member name="T:Xomega.Framework.Lookup.ILookupCacheProvider">
            <summary>
            An interface that allows providing lookup caches for a give cache type.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Lookup.ILookupCacheProvider.GetLookupCache(System.String)">
            <summary>
            Gets an instance of a lookup cache of the specified type.
            Typically either <see cref="F:Xomega.Framework.Lookup.LookupCache.Global"/> or <see cref="F:Xomega.Framework.Lookup.LookupCache.User"/> constants are used as a cache type.
            </summary>
            <param name="type">Cache type.</param>
            <returns>An instance of a lookup cache of the specified type or <c>null</c> if no cache can be found.</returns>
        </member>
        <member name="T:Xomega.Framework.Lookup.SingletonLookupCacheProvider">
            <summary>
            A default implementation of the <c>ILookupCacheProvider</c> interface.
            For any cache type it returns the same global instance of the lookup cache.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Lookup.SingletonLookupCacheProvider.globalInstance">
            <summary>
            The global instance of the lookup cache provider.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Lookup.SingletonLookupCacheProvider.GetLookupCache(System.String)">
            <summary>
            Gets the global instance of a lookup cache irrespective of the specified type.
            </summary>
            <param name="type">Cache type.</param>
            <returns>The global instance of a lookup cache.</returns>
        </member>
        <member name="T:Xomega.Framework.Lookup.LookupTable">
            <summary>
            A self-indexing lookup table. The data set for the table is based on a list of values of type <c>Header</c>.
            The table allows looking up values based on any string represenation of the headers as defined 
            by the format string that you pass in. If the data is not indexed by that format, the table will build
            and cache the index first.
            </summary>
            <remarks>
            The table returns a deep copy of its values to protect from accidental changes of the data
            by the caller, which would otherwise affect all other users of the lookup table.
            Access to the table data is synchronized.
            </remarks>
        </member>
        <member name="F:Xomega.Framework.Lookup.LookupTable.GroupAttrPrefix">
            <summary>
            This is a constant that is used when indexing by non-unique fields/formats to store
            the rest of items with the same key, while only the first one is returned by the lookup.
            This is a prefix, which combined with the format string, forms an attribute name
            in the first item where additional items with the same key are stored.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Lookup.LookupTable.data">
            <summary>
            Raw data as a list.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Lookup.LookupTable.indexedData">
            <summary>
            Indexed data by key format that is used to get the key.
            </summary> 
        </member>
        <member name="F:Xomega.Framework.Lookup.LookupTable.caseSensitive">
            <summary>
            A flag of whether or not to use case-sensitive lookups.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Lookup.LookupTable.rwLock">
            <summary>
            An internal reader/writer lock to synchronize access to the data.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupTable.#ctor(System.String,System.Collections.Generic.IEnumerable{Xomega.Framework.Header},System.Boolean)">
            <summary>
            Constructs a new lookup table from the specified data set.
            </summary>
            <param name="type">Lookup table type string.</param>
            <param name="data">A list of headers that serves as the table's data set.</param>
            <param name="caseSensitive">A boolean flag of whether or not to perform case sensitive look-ups.</param>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupTable.GetValues">
            <summary>
            Enumerates all values in the table.
            </summary>
            <returns>An enumeration that contains a copy each value in the table.</returns>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupTable.GetValues(System.Func{Xomega.Framework.Header,System.Boolean})">
            <summary>
            Get a copy of the table values filtered by the supplied function.
            Only values that match the filter will be cloned, which is better for performance.
            </summary>
            <param name="filterFunc">A function to filter the values or <c>null</c> to return all values.</param>
            <returns>A filtered enumeration that contains copies of each value matching the filter.</returns>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupTable.LookupById(System.String)">
            <summary>
            Looks up a Header item by the ID field. <see cref="F:Xomega.Framework.Header.FieldId"/> is used as a format.
            </summary>
            <param name="id">The ID value to look up by.</param>
            <returns>A copy of the Header with the specified ID.</returns>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupTable.LookupByFormat(System.String,System.String)">
            <summary>
            Looks up an item in the table by a value of the item string representation
            specified by the supplied format parameter. If the table is not indexed
            by the given format, it builds such an index first.
            If multiple items have the same value for the given format, then only the
            first one will be returned and the rest of them will be stored in an attribute
            with a name composed from the <see cref="F:Xomega.Framework.Lookup.LookupTable.GroupAttrPrefix"/> constant and the format string.
            </summary>
            <param name="format">The format used to evaluate a string value for each item.</param>
            <param name="value">The value to look up by.</param>
            <returns>A copy of the Header item, for which evaluation of the given format
            matches the value provided. If no match is found a <c>null</c> value is returned.</returns>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupTable.ResetIndexes">
            <summary>
            Clears all indexes in the table.
            The indexes will be rebuilt as needed at the first subsequent attempt to look up a value by any format.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupTable.ClearIndex(System.String)">
            <summary>
            Clears an index for the given format. The index will be rebuilt at the next attempt
            to look up a value by this format.
            </summary>
            <param name="format">Format string.</param>
            <returns>true if the index was found and cleared; otherwise false.</returns>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupTable.BuildIndexedTable(System.String)">
            <summary>
            Builds an index for the specified format.
            </summary>
            <param name="format">Format string.</param>
            <returns>An indexed table for the specified format.</returns>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupTable.Equals(System.String,System.String)">
            <summary>
            Compares two strings in a case-(in)sensitive manner as specified by the caseSensitive member.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupTable.GetHashCode(System.String)">
            <summary>
            Returns a hash code for a string in a case-(in)sensitive manner as specified by the caseSensitive member.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Lookup.LookupTable.Type">
            <summary>
            A type string for the lookup table.
            </summary>
        </member>
        <member name="T:Xomega.Framework.Header">
            <summary>
            A general-purpose class that represents the header information of any object,
            that includes the most relevant fields to identify the object and any additional attributes
            that can be used for filtering or to support various display options.
            The Type string of a header determines the class of objects it represents.
            It has also a string based internal ID and a Text field for display purposes.
            It can also have any number of additional named attributes that can hold any value or a list of values.
            </summary>
            <remarks>
            Headers can be converted to a string representation with an arbitrary format,
            which can contain any combination of the header's ID, Text or any of its additional attributes.
            </remarks>
        </member>
        <member name="F:Xomega.Framework.Header.FieldId">
            <summary>
            A constant that represents the ID field when used as part of the display format.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Header.FieldText">
            <summary>
            A constant that represents the Text field when used as part of the display format.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Header.AttrPattern">
            <summary>
            A constant that represents a named attribute when used as part of the display format.
            The placeholder {0} should be replaced with the attribute name by calling
            <c>String.Format(AttrPattern, attrName);</c>
            </summary>
        </member>
        <member name="F:Xomega.Framework.Header.attributes">
            <summary>
            Internal dictionary for named attributes.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Header.defaultFormat">
            <summary>
            Default format to use when converting the header to a string. By default, it displays the header ID.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Header.#ctor(System.String,System.String)">
            <summary>
            Constructs an invalid header of the given type with just an ID.
            </summary>
            <param name="type">The type string for the header.</param>
            <param name="id">The ID string for the header.</param>
        </member>
        <member name="M:Xomega.Framework.Header.#ctor(System.String,System.String,System.String)">
            <summary>
             Constructs a valid header of the given type with the specified ID and text.
            </summary>
            <param name="type">The type string for the header.</param>
            <param name="id">The ID string for the header.</param>
            <param name="text">The user friendly text that identifies this header.</param>
        </member>
        <member name="M:Xomega.Framework.Header.#ctor(Xomega.Framework.Header)">
            <summary>
            Constructs a deep copy of a header from another header.
            The copies of the attribute values are shallow though.
            </summary>
            <param name="hdr">Another header to copy from.</param>
        </member>
        <member name="M:Xomega.Framework.Header.Clone">
            <summary>
            Constructs a clone of the current header that is of the same type as this one.
            </summary>
            <returns>A clone of the current header.</returns>
        </member>
        <member name="M:Xomega.Framework.Header.AddToAttribute(System.String,System.Object)">
            <summary>
            Sets the attribute value if it has never been set. Otherwise adds a value
            to the list of values of the given attribute unless it already has such a value.
            If the current attribute value is not a list, it creates a list and adds it to the list first.
            </summary>
            <param name="attribute">Attribute name.</param>
            <param name="value">The value to add to the attribute.</param>
        </member>
        <member name="M:Xomega.Framework.Header.op_Equality(Xomega.Framework.Header,Xomega.Framework.Header)">
            <summary>
            Redefines the equals operator to compare headers by values and not references.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Header.op_Inequality(Xomega.Framework.Header,Xomega.Framework.Header)">
            <summary>
            Redefines the 'not equals' operator to compare headers by values and not references.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Header.Equals(System.Object)">
            <summary>
            Compares this header with another header for equality by values.
            Two headers are considered equal if they have the same type and the same ID.
            </summary>
            <param name="obj">An object to compare this header to.</param>
            <returns>True of the other object is also a header with the same type and ID, otherwise false.</returns>
        </member>
        <member name="M:Xomega.Framework.Header.GetHashCode">
            <summary>
            Overrides the hash code function to be based on the combination of the header's type and ID.
            </summary>
            <returns>The header's hash code.</returns>
        </member>
        <member name="M:Xomega.Framework.Header.ToString">
            <summary>
            Returns a string representation of the header based on the default format.
            </summary>
            <returns>A string representation of the header based on the default format.</returns>
        </member>
        <member name="M:Xomega.Framework.Header.ToString(System.String)">
            <summary>
            Returns a string representation of the header based on the specified format.
            The format string can use the constants <c>FieldId</c>, <c>FieldText</c> and <c>AttrPattern</c>
            to refer to the value of ID, Text or any named attribute of the header respectively.
            </summary>
            <param name="format">The format string to use.</param>
            <returns>A string representation of the header formatted according to the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Header.EvaluateMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Evaluates a regular expression match for the string formatting.
            Substitutes the constants <c>FieldId</c>, <c>FieldText</c> and <c>AttrPattern</c>
            with the corresponding value of ID, Text or the named attribute of the header respectively.
            </summary>
            <param name="m">The match to evaluate.</param>
            <returns>The result of the evaluation.</returns>
        </member>
        <member name="M:Xomega.Framework.Header.CompareTo(System.Object)">
            <summary>
            Compares this header to another object for sorting.
            By default, the headers are sorted by their Text field.
            </summary>
            <param name="obj">Another object to compare this header to for sorting.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects
                being compared. The return value has these meanings: Value Meaning Less than
                zero This instance is less than obj. Zero This instance is equal to obj.
                Greater than zero This instance is greater than obj.</returns>
        </member>
        <member name="P:Xomega.Framework.Header.Type">
            <summary>
            The Type string of a header determines the class of objects it represents.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Header.Id">
            <summary>
            String-based ID that should be unique for all headers of the given type.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Header.Text">
            <summary>
            A user friendly text that identifies this header.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Header.IsValid">
            <summary>
            A flag indicating if the header was properly constructed with both ID and the text.
            This is typically False if the header was not found in the corresponding lookup table
            and therefore was merely constructed from the user input.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Header.IsActive">
            <summary>
            A flag indicating if the header is currently active.
             Typically, only the active headers can be selected by the user,
             but the code can still look up and display an inactive header.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Header.DefaultFormat">
            <summary>
            Default format to use when converting the header to a string. By default, it displays the header ID.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Header.Item(System.String)">
            <summary>
            Returns a value of the given named attribute.
            </summary>
            <param name="attribute">Attribute name.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="T:Xomega.Framework.Properties.IntegerProperty">
            <summary>
            A data property that holds integer values.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.IntegerProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs an IntegerProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.IntegerProperty.CreateList(Xomega.Framework.ValueFormat)">
            <summary>
            Overrides the base method to construct a list of non-Nullable integer values
            for the Transport format, since it's a value type.
            </summary>
            <param name="format">The format to create a new list for.</param>
            <returns>A new list for the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.IntegerProperty.ConvertValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Converts a single value to a given format. For typed formats
            this method tries to convert various types of values to a nullable integer.
            </summary>
            <param name="value">A single value to convert to the given format.</param>
            <param name="format">The value format to convert the value to.</param>
            <returns>The value converted to the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.IntegerProperty.ValidateInteger(Xomega.Framework.DataProperty,System.Object)">
            <summary>
            A validation function that checks if the value is an integer and reports a validation error if not.
            </summary>
            <param name="dp">Data property being validated.</param>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.IntegerProperty.ValidateMinimum(Xomega.Framework.DataProperty,System.Object)">
            <summary>
            A validation function that checks if the value is an integer that is not less
            than the property minimum and reports a validation error if it is.
            </summary>
            <param name="dp">Data property being validated.</param>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.IntegerProperty.ValidateMaximum(Xomega.Framework.DataProperty,System.Object)">
            <summary>
            A validation function that checks if the value is an integer that is not greater
            than the property maximum and reports a validation error if it is.
            </summary>
            <param name="dp">Data property being validated.</param>
            <param name="value">The value to validate.</param>
        </member>
        <member name="P:Xomega.Framework.Properties.IntegerProperty.MinimumValue">
            <summary>
            The minimum valid value for the property.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Properties.IntegerProperty.MaximumValue">
            <summary>
            The maximum valid value for the property.
            </summary>
        </member>
        <member name="T:Xomega.Framework.Properties.PositiveIntegerProperty">
            <summary>
            An integer property for positive numbers only.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.PositiveIntegerProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a PositiveIntegerProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="T:Xomega.Framework.Properties.SmallIntegerProperty">
            <summary>
            An integer property for numbers in the range defined by the <c>short</c> CLR type.
            The <c>short</c> type is used for the transport value format.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.SmallIntegerProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a SmallIntegerProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.SmallIntegerProperty.CreateList(Xomega.Framework.ValueFormat)">
            <summary>
            Overrides the base method to construct a list of non-Nullable short values
            for the Transport format.
            </summary>
            <param name="format">The format to create a new list for.</param>
            <returns>A new list for the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.SmallIntegerProperty.ConvertValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Converts a single value to a given format. For the transport format
            the value is converted to a <c>short</c> type.
            </summary>
            <param name="value">A single value to convert to the given format.</param>
            <param name="format">The value format to convert the value to.</param>
            <returns>The value converted to the given format.</returns>
        </member>
        <member name="T:Xomega.Framework.Properties.PositiveSmallIntProperty">
            <summary>
            An small integer property for positive numbers only.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.PositiveSmallIntProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a PositiveSmallIntProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="T:Xomega.Framework.Properties.TinyIntegerProperty">
            <summary>
            An integer property for numbers in the range defined by the <c>byte</c> CLR type.
            The <c>byte</c> type is used for the transport value format.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.TinyIntegerProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a TinyIntegerProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="M:Xomega.Framework.Properties.TinyIntegerProperty.CreateList(Xomega.Framework.ValueFormat)">
            <summary>
            Overrides the base method to construct a list of non-Nullable byte values
            for the Transport format.
            </summary>
            <param name="format">The format to create a new list for.</param>
            <returns>A new list for the given format.</returns>
        </member>
        <member name="M:Xomega.Framework.Properties.TinyIntegerProperty.ConvertValue(System.Object,Xomega.Framework.ValueFormat)">
            <summary>
            Converts a single value to a given format. For the transport format
            the value is converted to a <c>byte</c> type.
            </summary>
            <param name="value">A single value to convert to the given format.</param>
            <param name="format">The value format to convert the value to.</param>
            <returns>The value converted to the given format.</returns>
        </member>
        <member name="T:Xomega.Framework.Properties.IntegerKeyProperty">
            <summary>
            An integer key property to distinguish keys from regular integers. Unlike for regular integers 
            comparison operators other than equality may not be applicable to integer keys.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Properties.IntegerKeyProperty.#ctor(Xomega.Framework.DataObject,System.String)">
            <summary>
             Constructs a IntegerKeyProperty with a given name and adds it to the parent data object under this name.
            </summary>
            <param name="parent">The parent data object to add the property to if applicable.</param>
            <param name="name">The property name that should be unique within the parent data object.</param>
        </member>
        <member name="T:Xomega.Framework.PropertyChangeEventArgs">
            <summary>
            Event arguments for the property change events.
            </summary>
        </member>
        <member name="F:Xomega.Framework.PropertyChangeEventArgs.change">
            <summary>
            Property change or combination of changes for the notification.
            </summary>
        </member>
        <member name="F:Xomega.Framework.PropertyChangeEventArgs.oldValue">
            <summary>
            For a single change, the old value before the change occured, where appliable.
            </summary>
        </member>
        <member name="F:Xomega.Framework.PropertyChangeEventArgs.newValue">
            <summary>
            For a single change, the new value after the change occured, where appliable.
            </summary>
        </member>
        <member name="M:Xomega.Framework.PropertyChangeEventArgs.#ctor(Xomega.Framework.PropertyChange,System.Object,System.Object)">
            <summary>
            Constructs property change event arguments.
            </summary>
            <param name="change">The change or combination of changes that took place.</param>
            <param name="oldValue">The old value before the change.</param>
            <param name="newValue">The new value after the change.</param>
        </member>
        <member name="P:Xomega.Framework.PropertyChangeEventArgs.Change">
            <summary>
            Returns the property change or combination of changes for the notification.
            </summary>
        </member>
        <member name="P:Xomega.Framework.PropertyChangeEventArgs.OldValue">
            <summary>
            For a single change, returns the old value before the change occured, where appliable.
            </summary>
        </member>
        <member name="P:Xomega.Framework.PropertyChangeEventArgs.NewValue">
            <summary>
            For a single change, returns the new value after the change occured, where appliable.
            </summary>
        </member>
        <member name="T:Xomega.Framework.PropertyChange">
            <summary>
            A class that represents a single property change or a combination of
            multiple property changes for notifying of several changes at once.
            </summary>
        </member>
        <member name="F:Xomega.Framework.PropertyChange.All">
            <summary>
            A static constant representing a combination of all changes.
            </summary>
        </member>
        <member name="F:Xomega.Framework.PropertyChange.Value">
            <summary>
            A static constant representing a change in property value.
            </summary>
        </member>
        <member name="F:Xomega.Framework.PropertyChange.Editable">
            <summary>
            A static constant representing a change in property editability.
            </summary>
        </member>
        <member name="F:Xomega.Framework.PropertyChange.Editing">
            <summary>
            A static constant representing a change in whether or not the property is being edited.
            </summary>
        </member>
        <member name="F:Xomega.Framework.PropertyChange.Required">
            <summary>
            A static constant representing a change in whether or not the property is required.
            </summary>
        </member>
        <member name="F:Xomega.Framework.PropertyChange.Items">
            <summary>
            A static constant representing a change in property's list of possible items.
            </summary>
        </member>
        <member name="F:Xomega.Framework.PropertyChange.Visible">
            <summary>
            A static constant representing a change in property visibility.
            </summary>
        </member>
        <member name="F:Xomega.Framework.PropertyChange.Validation">
            <summary>
            A static constant representing a change in property validation status.
            </summary>
        </member>
        <member name="F:Xomega.Framework.PropertyChange.change">
            <summary>
            Internal bitmask integer representing the property change(s).
            </summary>
        </member>
        <member name="M:Xomega.Framework.PropertyChange.#ctor(System.Int32)">
            <summary>
            Constructs a property change class.
            </summary>
            <param name="change">The change(s) bitmask.</param>
        </member>
        <member name="M:Xomega.Framework.PropertyChange.IncludesValue">
            <summary>
            Returns if the current combination of changes includes a value change.
            </summary>
            <returns>True if the current combination of changes includes a value change, otherwise false.</returns>
        </member>
        <member name="M:Xomega.Framework.PropertyChange.IncludesEditable">
            <summary>
            Returns if the current combination of changes includes a change in editability.
            </summary>
            <returns>True if the current combination of changes includes a change in editability, otherwise false.</returns>
        </member>
        <member name="M:Xomega.Framework.PropertyChange.IncludesEditing">
            <summary>
            Returns if the current combination of changes includes a change
            in whether or not the property is being edited.
            </summary>
            <returns>True if the current combination of changes includes a change 
            in whether or not the property is being edited, otherwise false.</returns>
        </member>
        <member name="M:Xomega.Framework.PropertyChange.IncludesRequired">
            <summary>
            Returns if the current combination of changes includes a change
            in whether or not the property is required.
            </summary>
            <returns>True if the current combination of changes includes a change 
            in whether or not the property is required, otherwise false.</returns>
        </member>
        <member name="M:Xomega.Framework.PropertyChange.IncludesItems">
            <summary>
            Returns if the current combination of changes includes a change
            in property's possible values.
            </summary>
            <returns>True if the current combination of changes includes a change
            in property's possible values, otherwise false.</returns>
        </member>
        <member name="M:Xomega.Framework.PropertyChange.IncludesVisible">
            <summary>
            Returns if the current combination of changes includes a change in visibility.
            </summary>
            <returns>True if the current combination of changes includes a change
            in visibility, otherwise false.</returns>
        </member>
        <member name="M:Xomega.Framework.PropertyChange.IncludesValidation">
            <summary>
            Returns if the current combination of changes includes a change in validation status.
            </summary>
            <returns>True if the current combination of changes includes a change
            in validation status, otherwise false.</returns>
        </member>
        <member name="M:Xomega.Framework.PropertyChange.op_Addition(Xomega.Framework.PropertyChange,Xomega.Framework.PropertyChange)">
            <summary>
            Combines two property changes and returns the change that represents the combination.
            </summary>
            <param name="lhs">Left-hand side property change.</param>
            <param name="rhs">Right-hand side property change.</param>
            <returns>The combination of the two property changes.</returns>
        </member>
        <member name="M:Xomega.Framework.PropertyChange.op_Subtraction(Xomega.Framework.PropertyChange,Xomega.Framework.PropertyChange)">
            <summary>
            Removes the right-hand side property change from the left-hand side combination of changes.
            </summary>
            <param name="lhs">The combination of property changes to remove the change from.</param>
            <param name="rhs">The property change to remove from the left-hand side combination.</param>
            <returns>The left-hand side property change without the right-hand side change.</returns>
        </member>
        <member name="T:Xomega.Framework.Lookup.LookupCache">
            <summary>
            A class that represents a cache of lookup tables by their types.
            It provides a static accessor function to get an instance of lookup cache by cache type.
            It also supports loading the lookup data from Xomega enumerations in XML format.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Lookup.LookupCache.Global">
            <summary>
            A constant that represents a global lookup cache that is shared for the whole application.
            This is typically a default option for the cache type to get.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Lookup.LookupCache.User">
            <summary>
            A constant that represents a lookup cache for the current user session.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Lookup.LookupCache.fmt">
            <summary>
            Triggers <see cref="M:Xomega.Framework.ValueFormat.StartUp"/> method if called first.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupCache.Get(System.String)">
            <summary>
            Gets an instance of a lookup cache of the specified type.
            Typically either <see cref="F:Xomega.Framework.Lookup.LookupCache.Global"/> or <see cref="F:Xomega.Framework.Lookup.LookupCache.User"/> constants are used as a cache type.
            </summary>
            <param name="cacheType">Cache type.</param>
            <returns>An instance of a lookup cache of the specified type or <c>null</c> if no cache can be found.</returns>
        </member>
        <member name="F:Xomega.Framework.Lookup.LookupCache.cacheLoaders">
            <summary>
            Static list of registered lookup cache loaders.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupCache.AddCacheLoader(Xomega.Framework.Lookup.ILookupCacheLoader)">
            <summary>
            Statically registers the given lookup cache loader.
            </summary>
            <param name="loader">The lookup cache loader to register.</param>
        </member>
        <member name="F:Xomega.Framework.Lookup.LookupCache.cache">
            <summary>
            A cache of lookup tables by type.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Lookup.LookupCache.notifyQueues">
            <summary>
            A dictionary by lookup table type of listeners
            waiting to be notified when the lookup table is loaded.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Lookup.LookupCache.rwLock">
            <summary>
            An internal reader/writer lock to synchronize access to the data.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupCache.GetLookupTable(System.String)">
            <summary>
            Gets a lookup table of the specified type from the cache.
            </summary>
            <param name="type">Lookup table type.</param>
            <returns>A lookup table of the specified type or <c>null</c> if no lookup table can be found.</returns>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupCache.GetLookupTable(System.String,Xomega.Framework.Lookup.LookupCache.LookupTableReady)">
            <summary>
            Gets a lookup table of the specified type from the cache.
            </summary>
            <param name="type">Lookup table type.</param>
            <param name="onReadyCallback">The method to call when the loading is complete if it happened asynchronously.</param>
            <returns>A lookup table of the specified type or <c>null</c> if no lookup table can be found.</returns>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupCache.LoadLookupTable(System.String,Xomega.Framework.Lookup.LookupCache.LookupTableReady)">
            <summary>
            A subroutine for loading the lookup table if it's not loaded.
            </summary>
            <param name="type">The type of the lookup table to load.</param>
            <param name="onReadyCallback">The method to call when the loading is complete if it happened asynchronously.</param>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupCache.RemoveLookupTable(System.String)">
            <summary>
            Removes the lookup table of the specified type from the cache.
            This method can be used to trigger reloading of the lookup table next time it is requested.
            </summary>
            <param name="type">The type of the lookup table to remove.</param>
        </member>
        <member name="M:Xomega.Framework.Lookup.LookupCache.CacheLookupTable(Xomega.Framework.Lookup.LookupTable)">
            <summary>
            Stores the given lookup table in the current cache under the table's type.
            The lookup table and its type should not be <c>null</c>.
            </summary>
            <param name="table">A lookup table to store.</param>
        </member>
        <member name="P:Xomega.Framework.Lookup.LookupCache.cacheProvider">
            <summary>
            An instance of the cache provider constructed for the application from the current configuration.
            </summary>
        </member>
        <member name="P:Xomega.Framework.Lookup.LookupCache.CacheType">
            <summary>
            Cache type of the current cache.
            </summary>
        </member>
        <member name="T:Xomega.Framework.Lookup.LookupCache.LookupTableReady">
            <summary>
            A delegate for notifying the caller that requested a lookup table that this table
            has been loaded when the latter happened asynchronously (e.g. a WCF service call in Silverlight).
            </summary>
            <param name="type">The type of lookup table that has been loaded.</param>
        </member>
        <member name="T:Xomega.Framework.ErrorMessage">
            <summary>
            An error message that consists of an error code, a text message and the severity.
            Error messages are typically added to an error list and can be serialized
            to allow sending them in a service call.
            </summary>
        </member>
        <member name="M:Xomega.Framework.ErrorMessage.#ctor">
            <summary>
            Default constructor to support deserialization.
            </summary>
        </member>
        <member name="M:Xomega.Framework.ErrorMessage.#ctor(System.String,System.String)">
            <summary>
            Constructs an error with a given error code and message.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Xomega.Framework.ErrorMessage.#ctor(System.String,System.String,Xomega.Framework.ErrorSeverity)">
            <summary>
            Constructs an error message with a given code, message and severity.
            </summary>
            <param name="code">The error message code.</param>
            <param name="message">The text message.</param>
            <param name="sev">The error message severity.</param>
        </member>
        <member name="P:Xomega.Framework.ErrorMessage.Code">
            <summary>
            Error code, which is an error identifier.
            </summary>
        </member>
        <member name="P:Xomega.Framework.ErrorMessage.Message">
            <summary>
            Full error message text in the current language.
            </summary>
        </member>
        <member name="P:Xomega.Framework.ErrorMessage.Severity">
            <summary>
            Error severity, which may affect the execution flow.
            </summary>
        </member>
        <member name="T:Xomega.Framework.ErrorSeverity">
            <summary>
            Error severity possible values.
            </summary>
        </member>
        <member name="F:Xomega.Framework.ErrorSeverity.Info">
            <summary>
            Information message that can be displayed to the user.
            </summary>
        </member>
        <member name="F:Xomega.Framework.ErrorSeverity.Warning">
            <summary>
            A warning that may be displayed to the user for the confirmation before proceeding,
            if supported by the current execution context.
            </summary>
        </member>
        <member name="F:Xomega.Framework.ErrorSeverity.Error">
            <summary>
            An error, that will be displayed to the user with the other errors. It doesn't stop
            the execution flow, but prevents the operation from successfully completing.
            </summary>
        </member>
        <member name="F:Xomega.Framework.ErrorSeverity.Critical">
            <summary>
            A critical error, which stops the execution immediately and returns a fault to the user.
            </summary>
        </member>
        <member name="T:Xomega.Framework.ErrorList">
            <summary>
            A list of error messages and utility methods to manipulate them.
            </summary>
        </member>
        <member name="F:Xomega.Framework.ErrorList.ResourceManager">
            <summary>
            A static resource manager, which can be used to translate the error messages
            to the current language.
            </summary>
        </member>
        <member name="F:Xomega.Framework.ErrorList.current">
            <summary>
            A singleton current error list to return in the absence of the current operation context.
            </summary>
        </member>
        <member name="M:Xomega.Framework.ErrorList.FromException(System.Exception)">
            <summary>
            Retrieves the error list from the specified exception if possible,
            otherwise constructs a new error list with the exception as the error message.
            </summary>
            <param name="ex">Exception to retrieve the error list from.</param>
            <returns>An error list retrieved from the exception.</returns>
        </member>
        <member name="F:Xomega.Framework.ErrorList.errors">
            <summary>
            Internal list of error messages.
            </summary>
        </member>
        <member name="M:Xomega.Framework.ErrorList.GetMessage(System.String,System.Object[])">
            <summary>
            Gets the text message based on the given error code and parameters.
            Uses the resource manager if set to look up the localized message by the error code.
            </summary>
            <param name="code">The error code.</param>
            <param name="parameters">An array of parameters to substitute into the message placeholders.</param>
            <returns>Localized message  for the given error code with substituted parameters.</returns>
        </member>
        <member name="M:Xomega.Framework.ErrorList.AddError(System.String,System.Object[])">
            <summary>
            Adds an error to the list with the given error code and additional parameters to substitute.
            </summary>
            <param name="code">The error code.</param>
            <param name="parameters">An array of parameters to substitute into the message placeholders.</param>
        </member>
        <member name="M:Xomega.Framework.ErrorList.CriticalError(System.String,System.Object[])">
            <summary>
            Adds a critical error to the list with the given error code and additional parameters to substitute
            and aborts the current operation.
            </summary>
            <param name="code">The error code.</param>
            <param name="parameters">An array of parameters to substitute into the message placeholders.</param>
        </member>
        <member name="M:Xomega.Framework.ErrorList.CriticalError(System.String,System.Boolean,System.Object[])">
            <summary>
            Adds a critical error to the list with the given error code and additional parameters to substitute
            and aborts the current operation with the reason being this message if required.
            </summary>
            <param name="code">The error code.</param>
            <param name="abort">True to abort the current operation.</param>
            <param name="parameters">An array of parameters to substitute into the message placeholders.</param>
        </member>
        <member name="M:Xomega.Framework.ErrorList.CriticalError(System.Net.HttpStatusCode,System.String,System.Object[])">
            <summary>
            Adds a critical error to the list with the given error code and additional parameters to substitute
            and aborts the current operation.
            </summary>
            <param name="status">HTTP status of the operation to report.</param>
            <param name="code">The error code.</param>
            <param name="parameters">An array of parameters to substitute into the message placeholders.</param>
        </member>
        <member name="M:Xomega.Framework.ErrorList.CriticalError(System.Net.HttpStatusCode,System.String,System.Boolean,System.Object[])">
            <summary>
            Adds a critical error to the list with the given error code and additional parameters to substitute
            and aborts the current operation with the reason being this message if required.
            </summary>
            <param name="status">HTTP status of the operation to report.</param>
            <param name="code">The error code.</param>
            <param name="abort">True to abort the current operation.</param>
            <param name="parameters">An array of parameters to substitute into the message placeholders.</param>
        </member>
        <member name="M:Xomega.Framework.ErrorList.AddWarning(System.String,System.Object[])">
            <summary>
            Adds a warning to the list with the given error code and additional parameters to substitute.
            </summary>
            <param name="code">The error code.</param>
            <param name="parameters">An array of parameters to substitute into the message placeholders.</param>
        </member>
        <member name="M:Xomega.Framework.ErrorList.AddInfo(System.String,System.Object[])">
            <summary>
            Adds an info message to the list with the given error code and additional parameters to substitute.
            </summary>
            <param name="code">The message code.</param>
            <param name="parameters">An array of parameters to substitute into the message placeholders.</param>
        </member>
        <member name="M:Xomega.Framework.ErrorList.Abort(System.Net.HttpStatusCode)">
            <summary>
            Aborts the current operation with the specified HTTP error status by throwing a WebFaultException.
            </summary>
            <param name="status">The HTTP (error) status for aborted operation.</param>
        </member>
        <member name="M:Xomega.Framework.ErrorList.Abort(System.String)">
            <summary>
            Aborts the current operation with the specified reason by throwing a FaultException.
            </summary>
            <param name="reason">The reason for aborting the operation.</param>
        </member>
        <member name="M:Xomega.Framework.ErrorList.AbortIfHasErrors">
            <summary>
            Aborts the current operation in the current list has any errors.
            </summary>
        </member>
        <member name="M:Xomega.Framework.ErrorList.AbortIfHasErrors(System.Net.HttpStatusCode)">
            <summary>
            Aborts the current operation in the current list has any errors.
            </summary>
            <param name="status">The HTTP (error) status for aborted operation.</param>
        </member>
        <member name="M:Xomega.Framework.ErrorList.HasErrors">
            <summary>
            Checks if the current list has any errors or critical errors.
            </summary>
            <returns>True if the current list has any errors or critical errors, otherwise false.</returns>
        </member>
        <member name="M:Xomega.Framework.ErrorList.Add(Xomega.Framework.ErrorMessage)">
            <summary>
            Adds the given error message to the list.
            </summary>
            <param name="err">Error message to add to the list.</param>
        </member>
        <member name="M:Xomega.Framework.ErrorList.MergeWith(Xomega.Framework.ErrorList)">
            <summary>
            Merges the current list with another error list.
            </summary>
            <param name="otherList">Another error list to merge the current list with.</param>
        </member>
        <member name="M:Xomega.Framework.ErrorList.Clear">
            <summary>
            Clears the error list.
            </summary>
        </member>
        <member name="P:Xomega.Framework.ErrorList.Current">
            <summary>
            Returns the error list associated with the current operation context.
            Service operations should use this error list to report the errors back to the caller.
            </summary>
        </member>
        <member name="P:Xomega.Framework.ErrorList.Errors">
            <summary>
            Returns a read-only collection of error messages from this list.
            </summary>
        </member>
        <member name="P:Xomega.Framework.ErrorList.ErrorsText">
            <summary>
             Gets a combined error text by concatenating all error messages with a new line delimiter.
            </summary>
        </member>
        <member name="T:Xomega.Framework.Lookup.XmlLookupCacheLoader">
            <summary>
            A specialized lookup cache loader that allows loading look up tables from XML format.
            Generally it can be used in simple cases when the static data can be defined in XML format
            rather than stored in a relational database structure.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Lookup.XmlLookupCacheLoader.fmt">
            <summary>
            Triggers <see cref="M:Xomega.Framework.ValueFormat.StartUp"/> method if called first.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Lookup.XmlLookupCacheLoader.#cctor">
            <summary>
            Instrumentation hook.
            </summary>
        </member>
        <member name="F:Xomega.Framework.Lookup.XmlLookupCacheLoader.doc">
            <summary>
            Reference to the XML document for the static data.
            </summary>
        </member>
        <member name="M:Xomega.Framework.Lookup.XmlLookupCacheLoader.#ctor(System.IO.Stream)">
            <summary>
            Constructs an XML lookup cache loader from the given XML stream.
            </summary>
            <param name="stream">The XML stream that contains the lookup data.</param>
        </member>
        <member name="M:Xomega.Framework.Lookup.XmlLookupCacheLoader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Constructs an XML lookup cache loader from the given XML stream.
            </summary>
            <param name="stream">The XML stream to load the lookup data from.</param>
            <param name="caseSensitive">A flag indicating whether or not the lookup tables should be case-sensitive.
            Typically this is based on whether or not the application database is case-sensitive.</param>
        </member>
        <member name="M:Xomega.Framework.Lookup.XmlLookupCacheLoader.#ctor(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Constructs an XML lookup cache loader from the given XML stream.
            </summary>
            <param name="stream">The XML stream to load the lookup data from.</param>
            <param name="cacheType">Initializes the type of cache that this loader applies too.</param>
            <param name="caseSensitive">A flag indicating whether or not the lookup tables should be case-sensitive.
            Typically this is based on whether or not the application database is case-sensitive.</param>
        </member>
        <member name="M:Xomega.Framework.Lookup.XmlLookupCacheLoader.LoadCache(System.String,Xomega.Framework.Lookup.LookupCacheLoader.CacheUpdater)">
            <summary>
            Loads Xomega enumerations in Xomega XML format into the current cache from the given stream.
            </summary>
            <param name="tableType">The lookup table type to load.</param>
            <param name="updateCache">The method to call to store the loaded lookup table in the cache.</param>
        </member>
        <member name="T:Xomega.Framework.IServiceBase">
            <summary>
            A base class for all Xomega service interfaces that provides common functionality for all interfaces.
            </summary>
        </member>
        <member name="M:Xomega.Framework.IServiceBase.SaveChanges(System.Boolean)">
            <summary>
            Validates and saves all changes that have been made during prior service calls in the same session.
            If there are any validation errors during saving of the changes than a fault will be raised
            with an error list that contains all the errors. A fault will also be raised if there are only
            validation warnings and the <c>suppressWarnings</c> flag is passed in as false. In this case
            the client can review the warnings and re-issue the service call with this flag set to true
            to proceed regardless of the warnings.
            </summary>
            <param name="suppressWarnings">True to save changes even if there are warnings,
            False to raise a fault if there are any warnings.</param>
            <returns>The number of objects that have been added, modified, or deleted in the current session.</returns>
            <seealso cref="!:System.Data.Objects.ObjectContext.SaveChanges()"/>
        </member>
        <member name="M:Xomega.Framework.IServiceBase.EndSession">
            <summary>
            An explicit call to end the service session to support custom session mechanism for http bindings
            in Silverlight 3. This will allow releasing the instance of the service object on the server.
            </summary>
        </member>
    </members>
</doc>
